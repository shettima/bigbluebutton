<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       width="590" height="300" showCloseButton="false"
	       focusEnd="setFocusOff()"
	       creationComplete="init()"
	       implements="org.bigbluebutton.common.IBbbModuleWindow" xmlns:components="org.bigbluebutton.modules.chat.view.components.*">

	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.chat.model.business.UserVO;
			import mx.controls.Alert;
			import org.bigbluebutton.modules.chat.ChatModuleConstants;
			import org.bigbluebutton.modules.chat.view.ChatWindowMediator;
			import mx.collections.ArrayCollection;
			import org.bigbluebutton.modules.chat.view.SendMessageEvent;
			import mx.core.Application;
			import mx.events.MenuEvent;
			import mx.controls.Menu;
			import mx.utils.ColorUtil;
			import mx.core.UIComponent;
					
			private var sizeM:Menu;					
			public static const SEND_MESSAGE:String = 'sendMessageEvent';
			
			private var _xPosition:int;
			private var _yPosition:int;
			
			[Bindable]
			private var participants:ArrayCollection = new ArrayCollection();
						
			private function init():void{
				addParticipant(new UserVO("All", "0"));
				dispatchEvent(new Event(ChatModuleConstants.OPEN_CHAT_BOX));
			}
			
			public function setFocusOn(component:UIComponent):void
			{
				if (component.id == "txtMsg") {
				component.setFocus();
                component.drawFocus(true);
    			}
    			else
    			{
    				this.txtMsg.setFocus();
    				this.txtMsg.drawFocus(true);
    			}
				//this.txtMsg.focusManager.showFocusIndicator = true;
			}
			
			public function setFocusOff():void
			{
				//this.txtMsg.setFocus();
				//this.txtMsg.cursorManager.hideCursor();
				this.txtMsg.drawFocus(false);
				
				//this.txtMsg.cursorManager.removeAllCursors();
			}
			
		    public function sendMessages():void
		    {
		    	if (txtMsg.text != ""){
			   		dispatchEvent(new SendMessageEvent(SEND_MESSAGE));
			   	}
			}


			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			public function addParticipant(userVO:UserVO):void{
				var item:Object = new Object();
				item.label = userVO.username;
				item.userid = userVO.userid;
				participants.addItem(item);
			}
			
			public function removeParticipant(name:String):void{
				//if (tabNav.getChildByName(name) != null){
				//	tabNav.removeChild(tabNav.getChildByName(name));
				//}
				if (tabNav.getChildByName(name) == tabNav.selectedChild){
					txtMsg.enabled = false;
				}
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == name) participants.removeItemAt(i);
				}
			}
			
			public function setMessageUnread(name:String):void{
				var tab:Button = tabNav.getTabAt(tabNav.getChildIndex(tabNav.getChildByName(name)));
				tab.setStyle("fillColors", new Array(0xFFAE00, 0xD3800A));
				tab.setStyle("fillAlphas", new Array(1.0, 0.8));
			}
			
			private function updateTabNav():void{
				var tab:Button = tabNav.getTabAt(tabNav.selectedIndex);
				tab.setStyle("fillColors", new Array(0xFFFFFF, 0xCCCCCC));
				var found:Boolean = false;
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).label == tab.label){
						participantList.selectedItem = participants.getItemAt(i); 
						found = true;
					}
				}
				txtMsg.enabled = found;
			}
			
			public function getParticipantName(userid:String):String{
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == userid) return participants.getItemAt(i).label;
				}
				return "unknown user";
			}
            
		]]>
	</mx:Script>
	<mx:TabNavigator id="tabNav" width="100%" height="100%" change="updateTabNav()"/>
	
	<mx:ApplicationControlBar id="chatCtrlBar" width="100%" height="10%">		
		<mx:TextInput id="txtMsg" width="100%" enter="sendMessages()"/>
		<mx:ColorPicker id="cmpColorPicker" showTextField="false" toolTip="Text Color" selectedColor="0x000000"/>
		<mx:Button label="Send" id="sendBtn" toolTip="Send Message" click="sendMessages()"/>	
		<mx:ComboBox id="participantList" dataProvider="{participants}" close="dispatchEvent(new Event(ChatModuleConstants.OPEN_CHAT_BOX))" />		    
	</mx:ApplicationControlBar>

</MDIWindow>
