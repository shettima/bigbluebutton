<?xml version="1.0" encoding="utf-8"?>
<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       width="300" height="300" showCloseButton="false"
	       creationComplete="init()"
	       xmlns:phone="org.bigbluebutton.modules.red5phone.view.components.*"
	       implements="org.bigbluebutton.common.IBbbModuleWindow">
	   
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.red5phone.view.MailBoxCountEvent;
			import org.bigbluebutton.modules.red5phone.view.MailBoxStatusEvent;
			import org.bigbluebutton.modules.red5phone.view.MissedCallEvent;
			import org.bigbluebutton.modules.red5phone.view.CallDisconnectedEvent;
			import org.bigbluebutton.modules.red5phone.view.CallConnectedEvent;
			import org.bigbluebutton.modules.red5phone.view.IncomingCallEvent;
			import org.bigbluebutton.modules.red5phone.view.Red5MessageEvent;
			import org.bigbluebutton.modules.red5phone.view.Red5Manager;
			
			private var username:String = "1002";
			private var password:String = "ff3j";
			private var red5Url:String = "rtmp://localhost/sip";
			private var sipRealm:String = "134.117.254.226";
			private var sipServer:String = "134.117.254.226"; 
			private var mailbox:String = ""; 
			private var autologin:Boolean = false;

			private var _xPosition:int = 675;
			private var _yPosition:int = 230;

			private function init():void {
				var loader:URLLoader = new URLLoader();
			    var request:URLRequest = new URLRequest("conf/sip-config.xml");	
			    	
				loader.load(request);
				loader.addEventListener(Event.COMPLETE, onComplete);			
			}
			
			private function onComplete(event:Event):void {
				var configXML:XML = new XML(event.target.data);
				red5Url 	= configXML.red5Url[0];
				sipRealm 	= configXML.sipRealm[0];
				sipServer 	= configXML.sipServer[0];

				//username = configXML.sipUsername[0];
				var username2:String = "User-";
				var rand:Number = Math.random();
				var rand2:Number = Math.round(rand*10);
				username = username2 + rand2.toString(); 

				password = configXML.sipPassword[0];
				mailbox = configXML.sipMailbox[0];		
			}
			
//			public var module:Red5PhoneModule;
			
			public var red5Manager:Red5Manager     = null;
			
			/**
			 * Workaround to pass in username for sip registration.
			 */
			public function set sipusername(value:String):void {
				username = value;
			}
			
//			private function init():void {		
//				username = module.sipusername;
//				password = module.sippassword;
//				sipRealm = module.siprealm;
//				sipServer = module.sipserver;
//				red5Url = module.uri;
//				autologin = false;
//				mailbox = "";
//				
//				LogUtil.debug("Login: [" + username + "," + password + "," + sipRealm + "," + sipServer + "," + red5Url + "]"); 
//				login(username, password, sipRealm, sipServer, red5Url, mailbox);														
//			}
			
			public function login():void {
//				this.username = username;
//				this.password = password;
//				this.red5Url = url;
//				this.sipRealm = realm;
//				this.sipServer = server;
//				this.mailbox   = mailbox;
				
				LogUtil.debug("Login: [" + username + "," + password + "," + sipRealm + "," + sipServer + "," + red5Url + "]"); 
				red5Manager = new Red5Manager(username, password, red5Url, sipRealm, sipServer, mailbox);
				phoneCanvas.red5Manager = red5Manager;
				
				red5Manager.addEventListener(Red5MessageEvent.MESSAGE, receivedRed5MessageEvent);
				red5Manager.addEventListener(IncomingCallEvent.INCOMING, incomingCallEvent);
				red5Manager.addEventListener(CallConnectedEvent.CONNECTED, callConnectedEvent);
				red5Manager.addEventListener(CallDisconnectedEvent.DISCONNECTED, callDisconnectedEvent);
				red5Manager.addEventListener(MissedCallEvent.CALLMISSED, missedCallEvent);
				red5Manager.addEventListener(MailBoxStatusEvent.MAIBOXSTATUS, mailBoxStatusEvent);
				red5Manager.addEventListener(MailBoxCountEvent.MAIBOXCOUNT, mailBoxCountEvent);
				red5Manager.connectRed5();					
			}
			
			private function receivedRed5MessageEvent(event:Red5MessageEvent):void {
				var msgType:String 	= event.msgType;
				var message:String  = event.message;
				
				switch(msgType) {
					case Red5MessageEvent.NETSTAUS:
						LogUtil.debug('Red5MessageEvent.NETSTAUS: ' + message);
						break;
				
					case Red5MessageEvent.SIP_REGISTER:
						if(message == 'SUCCESS') {
							LogUtil.debug('Red5MessageEvent.SIP_REGISTER: Register Success');
							phoneCanvas.initMicrophone();
							this.addEventListener(KeyboardEvent.KEY_DOWN, keyHandler);
							phoneCanvas.statusTxt.text = "Ready";
							phoneCanvas.setFocus();
							
							red5Manager.doMialBoxStatus();
							red5Manager.doMailBoxCount();
							
						} 
						else {
							red5Manager.closeNetConnection();
							red5Manager = null;
							LogUtil.debug("Reg. Failure = " + message);	
						}
					
						break;
						
					case Red5MessageEvent.CALLSTATE:
					
						break;	
						
					default:	
				}
			}
			
			private function incomingCallEvent(event:IncomingCallEvent):void {
				LogUtil.debug("incomingCallEvent " + event.source + " " + event.sourceName);
				phoneCanvas.incomingCall(event);
			}
			
			private function callConnectedEvent(event:CallConnectedEvent):void {
				LogUtil.debug("CallConnectedEvent " + event.publishName + " " + event.playName);
				phoneCanvas.statusTxt.text = "Call Established";
				phoneCanvas.callConnected(red5Manager.netConnection, event.playName, event.publishName);
			}
			
			private function callDisconnectedEvent(event:CallDisconnectedEvent):void {
				LogUtil.debug("CallDisconnectedEvent " + event.message);
				phoneCanvas.callDisconnected();
			}
			
			private function missedCallEvent(event:MissedCallEvent):void {
				LogUtil.debug("CallDisconnectedEvent " + event.message);
				phoneCanvas.missedCall();
			}
			
			private function mailBoxStatusEvent(event:MailBoxStatusEvent):void {
				LogUtil.debug("MailBoxStatusEvent ");
				phoneCanvas.mailBoxStatus(event.isWaiting, event.newMessage, event.oldMessage);
				red5Manager.doMailBoxCount();
			}
			
			private function mailBoxCountEvent(event:MailBoxCountEvent):void {
				LogUtil.debug("MailBoxCountEvent ");
				phoneCanvas.mailBoxCount(event.newMessage, event.oldMessage);
			}
			
			private function keyHandler(event:KeyboardEvent):void {
			
				switch(event.charCode) {
					case 48:
						phoneCanvas.addChr("0");
						break;
					case 49:
						phoneCanvas.addChr("1");
						break;
					case 50:
						phoneCanvas.addChr("2");
						break;
					case 51:
						phoneCanvas.addChr("3");
						break;
					case 52:
						phoneCanvas.addChr("4");
						break;
					case 53:
						phoneCanvas.addChr("5");
						break;
					case 54:
						phoneCanvas.addChr("6");
						break;
					case 55:
						phoneCanvas.addChr("7");
						break;
					case 56:
						phoneCanvas.addChr("8");
						break;
					case 57:
						phoneCanvas.addChr("9");
						break;
					case 8:
						phoneCanvas.removeChr();
						break;
					case 127:
						
						break;
					case 35:
						//phoneCanvas.addChr("#");
						break;
					case 42:
						//phoneCanvas.addChr("*");
						break;
					default:
				}
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
	        
		]]>
	</mx:Script>
	
	<phone:PhoneCanvas id="phoneCanvas" x="0" y="0" width="100%" height="100%" visible="true"/>
	<mx:Button label="Login" click="login()"/>
</MDIWindow>
