<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright 2008 Theo Hultberg/Iconara -->

<EventMap xmlns="http://mate.asfusion.com/" xmlns:mx="http://www.adobe.com/2006/mxml">

	<!--
	This is the main event map for the application, think of it as the application controller.
	-->
	<EventHandlers type="{FlexEvent.INITIALIZE}">        
        <MethodInvoker generator="{ModeInitializer}" method="getUrl" />
        <MethodInvoker generator="{ModeInitializer}" method="queryMode" arguments="{lastReturn}" />
        <EventAnnouncer generator="{ModeEvent}" type="{ModeEvent.MODE_INIT_EVENT}">
            <Properties mode="{lastReturn}" />
        </EventAnnouncer>
    </EventHandlers>

	<EventHandlers type="{ModeEvent.MODE_INIT_EVENT}">
        <HTTPServiceInvoker instance="{configService}">
			<resultHandlers>
				<MethodInvoker generator="{ConfigLoader}" method="parse" arguments="{resultObject}" /> 
			</resultHandlers>
		</HTTPServiceInvoker>   
    </EventHandlers>

	<Injectors target="{MainView}">
		<!--
		This creates the Presentation Model object for the MainView, notice the registerTarget
		property, which makes it possible to use Injectors that target this object, something that
		otherwise is only possible with view objects.
		-->
	    <ObjectBuilder generator="{MainModel}" registerTarget="true" />

		<!-- This injects the MainModel instance created by the last tag into the MainView instance -->
		<PropertyInjector targetKey="model" source="{lastReturn}" />
	</Injectors>
	
	<Injectors target="{MainModel}">
		<!--
		DocumentModel is not a view class, but can be used as a target for injection because an instance
		of the class was created with an ObjectBuilder that had the registerTarget property set to true,
		see the Injectors for DocumentView.
		-->

		<!--
		"scope.dispatcher" refers to the event dispatcher used by the event map. Events dispatched using this
		dispatcher will be heard by this event map. The reason why I inject this dispatcher into the MainModel
		object is that since it's not a view class events that it dispatches don't bubble up, and so it needs
		a way to dispatch events that can be heard by this event map.
		-->
		<PropertyInjector targetKey="dispatcher"      source="{scope.dispatcher}"/>
		
	</Injectors>
	
	<mx:Script>
	<![CDATA[
			
	import mx.events.FlexEvent;
	import org.bigbluebutton.main.services.ModeInitializer;	
	import org.bigbluebutton.main.events.ModeEvent;
	import org.bigbluebutton.main.services.ConfigLoader;
	import org.bigbluebutton.main.views.model.MainModel;
	import org.bigbluebutton.main.views.components.MainView;
	]]>
	</mx:Script>
	
	<Debugger level="{Debugger.ALL}"/>

    <!-- ======================================================================================== -->
    <!-- Services   Note: you can have an external file if you have more services -->
    <!-- _________________________________________________________________________________________ -->
    
    <mx:HTTPService id="configService" url="conf/modules.xml" resultFormat="e4x" />
		
</EventMap>
