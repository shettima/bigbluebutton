<?xml version="1.0" encoding="utf-8"?>
<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="400" height="300"
	xmlns:flexlib = "http://code.google.com/p/flexlib/"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()">
	 
	<mx:Script>
		<![CDATA[
			import mx.controls.TextArea;
			import mx.core.Application;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.whiteboard.BoardFacade;
			import org.bigbluebutton.modules.whiteboard.model.component.ShapeFactory;
			import org.bigbluebutton.modules.whiteboard.model.DrawVO;
			import org.bigbluebutton.modules.whiteboard.model.component.DrawObjectFactory;
			import org.bigbluebutton.modules.whiteboard.model.component.DrawObject;
			
			
			private var x1:int;
			private var y1:int;
			private var x2:int; 
			private var y2:int;
			
			public var d:DrawObject;	
			public var pointerX:int;	
			public var pointerY:int;	
			private var isDrawing:Boolean; 
			private var feedback:Shape = new Shape();
			private var segment:Array = new Array();
			private var newShape:Shape = new Shape();
			private var shapeList:Array = new Array();
			
			private var images:Images = new Images();
			[Bindable] private var square_icon:Class = images.square_icon;
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			[Bindable] private var undo_icon:Class = images.undo_icon;
			[Bindable] private var circle_icon:Class = images.circle_icon;
			[Bindable] private var delete_icon:Class = images.delete_icon;
			[Bindable] private var text_icon:Class = images.text_icon;
			[Bindable] private var pointer_icon:Class = images.pointer_icon;
			
//			[Bindable]
//			public var drawVO:DrawVO = new DrawVO();
		
			protected var drawFactory:DrawObjectFactory;
			protected var shapeFactory:ShapeFactory;
		
			protected var shapeStyle:String = DrawObject.PENCIL;
			protected var drawColor:uint;
			protected var thickness:uint;
			
			private var _xPosition:int;
			private var _yPosition:int;
			
			//Full screen?
			private var dispState:String;
			
			private function init():void
			{
				drawFactory = new DrawObjectFactory();
				shapeFactory = new ShapeFactory();
				
				//Initialize full screen handler
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = Application.application.stage.displayState;
				
				sld.value = 2;
				this.thickness = sld.value; 
		        
		        textarea.visible = false;
		        pointer.visible = false;
				
				LogUtil.debug("Board.mxml::init");
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = Application.application.stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					//Notify user that the keyboard is not working
					this.maximizeRestoreBtn.visible = false;
					if (this.maximized){
						this.restore();
					}
				} else{
					this.maximizeRestoreBtn.visible = true;
				}
			}
			
			/**
			*Method is invoked when the mouse is pressed
			*<p>
			*The method captures the x and y coordinates of the mouse click and uses the point as
			*the starting point in a shape
			*/
			private function doMouseDown_canvas():void
			{
				if(this.shapeStyle==DrawObject.TEXT)
				{
					if(isDrawing)
					{
						isDrawing = false;
						this.d = drawFactory.makeDrawObject(this.shapeStyle,segment, this.drawColor, this.thickness, textarea.text);
						dispatchEvent(new Event(BoardMediator.SEND_SHAPE));
						
				        textarea.visible = false;
					}else
					{
						isDrawing = true;
						x1 = canvas.mouseX;
						y1 = canvas.mouseY;
						segment.push(x1);
						segment.push(y1);

						textarea.text = "";
				        textarea.visible = true;
						textarea.x = canvas.mouseX;
						textarea.y = canvas.mouseY;
						textarea.setFocus();
						
						locateEditor();
					}
				}else if(this.shapeStyle==DrawObject.POINTER){
				}else
				{
					isDrawing = true;
					x1 = canvas.mouseX;
					y1 = canvas.mouseY;
					segment.push(x1);
					segment.push(y1);
					canvas.rawChildren.addChild(feedback);
				}
			}
			
			/**
			*Method is invoked when the mouse is moved over the canvas
			*<p>
			*The method captures the x and y coordinates of the mouse, adding the points to the current
			*shape being drawn. 
			*<p>
			*Note: The method only works if the mouse is pressed, otherwise does nothing.
			*/
			private function doMouseMove_canvas():void
			{
				if(this.shapeStyle==DrawObject.TEXT)
				{
				}else if(this.shapeStyle==DrawObject.POINTER)
				{
					pointerX = canvas.mouseX;
					pointerY = canvas.mouseY;
					dispatchEvent(new Event(BoardMediator.SEND_MOVE));
				}else
				{
					if (isDrawing)
					{
						x2 = canvas.mouseX;
						y2 = canvas.mouseY;
						segment.push(x2);
						segment.push(y2);
					
						canvas.rawChildren.removeChild(feedback);
						feedback = shapeFactory.makeFeedback(segment,this.shapeStyle, this.drawColor, this.thickness, "");
						canvas.rawChildren.addChild(feedback);
					
						x1 = x2;
						y1 = y2;
					}
				}
			}

			/**
			*Method is invoked when the mouse is released
			*<p>
			*The method finalizes the shape that was being edited. The shape is then sent as 
			*an event, which updates all client views.  
			*<p>
			*The method also deleted the temporary feedback shape from the screen.
			*/
			private function doMouseUp_canvas():void
			{
				if(this.shapeStyle==DrawObject.TEXT)
				{
				}else if(this.shapeStyle==DrawObject.POINTER){
				}else
				{
					isDrawing = false;
					this.d = drawFactory.makeDrawObject(this.shapeStyle,segment, this.drawColor, this.thickness, "");
					dispatchEvent(new Event(BoardMediator.SEND_SHAPE));
					if (canvas.rawChildren.contains(feedback)){
						canvas.rawChildren.removeChild(feedback);
					}
					feedback = new Shape;
				}
			}
			
			public function locateEditor()
			{
				/*
				resizerL.x = textarea.x + textarea.width;
				resizerL.y = textarea.y + textarea.height-resizerL.height;
				textarea.text = String(resizerL.x);
				*/
			}
			
			/**
			 * Draws the segment stored in the drawVO Value Object
			 * <p>
			 * This method is executed by the BoardMediator upon reception of an Update request. The method
			 * is executed on all clients, even the one which sent the update request.
			 */
			public function drawSegment(draw:DrawObject):void
			{
				LogUtil.debug("draw.getType()=" + draw.getType() + "  " + draw.getShapeArray()[0] + "  " + draw.getShapeArray()[1]);	
				
				if(pointer.visible) pointer.visible = false;

				newShape = shapeFactory.makeShape(draw);
	            shapeList.push(newShape);
    	        canvas.rawChildren.addChild(shapeList[shapeList.length-1]);
        	    segment = new Array();
            	newShape = new Shape();
			}

			public function doMove(array:Array):void
			{
				if(!pointer.visible) pointer.visible = true;

				pointer.x = array[0];
				pointer.y = array[1];
			}
			
			/**
			 * Sets the type of shape we're drawing (pencil, rectangle, etc...) 
			 * @param s The type
			 * 
			 */		
			protected function setShape(s:String):void{
				this.shapeStyle = s;
			}
			
			/**
			 * Sets the color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			protected function changeColor(e:Event):void{
				drawColor = e.target.selectedColor;
			}
			
			/**
			 * Sets the thickness 
			 * @param e event containing the thickness (e.target.value)
			 * 
			 */		
			protected function changeThickness(e:Event):void{
				this.thickness = e.target.value;
			}
			
			/**
			 * Clears the entire board
			 */
			public function clearBoard():void{
				for (var i:Number = 0; i<this.shapeList.length; i++){
					if (this.canvas.rawChildren.contains(this.shapeList[i])){
						this.canvas.rawChildren.removeChild(this.shapeList[i]);	
					}
				}
				this.shapeList = new Array();
			}
			
			public function undoShape():void{
				if (this.shapeList.length > 0){
					this.canvas.rawChildren.removeChild(this.shapeList[this.shapeList.length-1]);
					shapeList.pop();
				}
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			]]>
	</mx:Script>
	
	<mx:Canvas id="canvas" 
		height="100%" width="100%"
		mouseDown="doMouseDown_canvas()" mouseMove="doMouseMove_canvas()" mouseUp="doMouseUp_canvas()"
		backgroundAlpha="0">

	<mx:TextArea id="textarea" width="200" height="200"
		verticalScrollPolicy="auto" horizontalScrollPolicy="auto" 
		wordWrap="false"
		color="{cpik.selectedColor}"
		 fontSize="{sld.value*8}"
	/>

	<mx:Image width="20" height="20"  id="pointer"  source="{pointer_icon}" />

	</mx:Canvas>

	<!--
	<comp:DynamicTextArea id="textarea"   width="200"  height="100" />
	<mx:Button   id="resizerL"   width="20"  height="20"   icon="{pencil_icon}"
		click=""
	/>
	-->
	
	<mx:ApplicationControlBar width="100%" height="10%">
		<mx:Button width="20" height="20"  id="btnPointer"  click="pointer.visible=true;  setShape(DrawObject.POINTER)"  icon="{pointer_icon}" toolTip="pointer" />
		<mx:Button width="20" height="20"  id="btnPenc"     click="pointer.visible=false; setShape(DrawObject.PENCIL)"  icon="{pencil_icon}" toolTip="pencil" />
		<mx:Button width="20" height="20"  id="btnRect"     click="pointer.visible=false; setShape(DrawObject.RECTANGLE)" icon="{square_icon}" toolTip="rectangle" />
		<mx:Button width="20" height="20"  id="btnEllip"    click="pointer.visible=false; setShape(DrawObject.ELLIPSE)" icon="{circle_icon}" toolTip="ellipse" />
		<mx:Button width="20" height="20"  id="btnText"     click="pointer.visible=false; setShape(DrawObject.TEXT)"  icon="{text_icon}" toolTip="text" />
		<mx:Button width="20" height="20"  id="btnClear"    click="pointer.visible=false; dispatchEvent(new Event(BoardMediator.CLEAR_BOARD))" icon="{delete_icon}" toolTip="clear" />
		<mx:Button width="20" height="20"  id="btnUndo"     click="pointer.visible=false; dispatchEvent(new Event(BoardMediator.UNDO_SHAPE))" icon="{undo_icon}" toolTip="undo" />
		<mx:ColorPicker change="changeColor(event)" id="cpik" toolTip="color" />
		<mx:HSlider width="50" id="sld" change="changeThickness(event)" toolTip="thickness/fontsize" />
	</mx:ApplicationControlBar>
</MDIWindow>