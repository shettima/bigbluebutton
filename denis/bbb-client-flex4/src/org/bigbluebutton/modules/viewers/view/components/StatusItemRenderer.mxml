<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"> 
	
	<mate:Listener type="ViewVideoCloseEvent" method="onViewVideoCloseEvent"/>
	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.modules.viewers.view.events.ViewCameraEvent;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.modules.viewers.view.events.LowerHandEvent;
			import org.bigbluebutton.modules.viewers.model.vo.Status;
			import org.bigbluebutton.modules.viewers.view.components.Images;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
				
			private function viewCamera():void {
   				LogUtil.debug("ViewersModule - sending camera view request for stream" + data.streamName);
   				streamIcon.enabled = false;
				dispatchEvent(new ViewCameraEvent(data.streamName, data.name));
   			}
   			
   			private function onViewVideoCloseEvent(event:BBBEvent):void {
   				LogUtil.debug("ViewWindoClosing event: " + event.message);
   				if (data.streamName == event.message) {
   					streamIcon.enabled = true;
   				}
   			}
   			
   			private function lowerHand():void {
				dispatchEvent(new LowerHandEvent(data.userid));
   			}				
		
   			[Bindable] private var webcamIcon:Class = images.webcam;
   			[Bindable] private var handIcon:Class = images.raisehand;	
   			[Bindable] private var presenterIcon:Object = images.presenter;
		]]>
	</mx:Script>
	<mx:Button id="raiseHand" visible="{data.raiseHand}" click="lowerHand()" 
				icon="{handIcon}" width="18" height="18"
				toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.raiseHand.toolTip'), 
				[new Date()]}"/>
	<mx:Button id="streamIcon" visible="{data.hasStream}" click="viewCamera()" icon="{webcamIcon}"
				width="18" height="18" 
				toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.streamIcon.toolTip')}"/>	
	<mx:Image id="presIcon" visible="{data.presenter}" source="{presenterIcon}" toolTip="{ResourceUtil.getInstance().getString('bbb.viewers.viewersGrid.statusItemRenderer.presIcon.toolTip')}"/>
</mx:HBox>
