<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationComplete()" 
	backgroundColor="gray" toolTip="Drag the black box to the area of the screen you wish to share">

	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;

			private var screenWidth:Number;
			private var screenHeight:Number;
			
			//private var rectangle:UIComponent;
			//private var rectangleShape:Shape;
			
			private var startDragX:Number;
			private var startDragY:Number;
			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			
			private var videoHolder:UIComponent = new UIComponent();
			private var videoPlayer:Video;
			private var ns:NetStream;
			
			private function onCreationComplete():void{
				screenWidth = Capabilities.screenResolutionX;
				screenHeight = Capabilities.screenResolutionY;
				this.width = screenWidth / 10;
				this.height = screenHeight / 10;
				
				videoPlayer = new Video(80, 60);
				videoHolder.setActualSize(80, 60);
				videoHolder.addChild(videoPlayer);
				this.addChild(videoHolder);
				videoHolder.x = 0;
				videoHolder.y = 0;
				
				//rectangle = new UIComponent();
				//rectangle.width = 80;
				//rectangle.height = 60;
				//rectangleShape = new Shape();
				//rectangleShape.graphics.beginFill(0x000000);
				//rectangleShape.graphics.drawRect(0,0, 80, 60);
				//rectangleShape.graphics.endFill();
				//rectangle.addChild(rectangleShape);
				//this.rawChildren.addChild(rectangle);
				//rectangle.x = this.width/2 - rectangle.width/2;
				//rectangle.y = this.height/2 - rectangle.height/2;
				
				videoHolder.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				videoHolder.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
			}
			
			public function startThumbnail(nc:NetConnection, streamName:String):void{
				ns = new NetStream(nc);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				videoPlayer.attachNetStream(ns);
				ns.play(streamName);
			}
			
			private function onMouseDown(e:MouseEvent):void{
				startDragX = videoHolder.x;
				startDragY = videoHolder.y;
				startDragMouseX = this.mouseX;
				startDragMouseY = this.mouseY;
				videoHolder.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseMove(e:MouseEvent):void{
				var newX:Number = startDragX + (this.mouseX - startDragMouseX);
				var newY:Number = startDragY + (this.mouseY - startDragMouseY);
				
				if (newX < 0) videoHolder.x = 0;
				else if (newX > this.width - 85) videoHolder.x = this.width - 80;
				else videoHolder.x = newX;
				
				if (newY < 0) videoHolder.y = 0;
				else if (newY > this.height - 65) videoHolder.y = this.height - 60;
				else videoHolder.y = newY;
			}
			
			private function onMouseUp(e:MouseEvent):void{
				videoHolder.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				ExternalInterface.call("setScreenCoordinates", getXPosition(), getYPosition());
			}
			
			private function onMouseOut(e:MouseEvent):void{
				videoHolder.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function getXPosition():Number{
				return videoHolder.x * 10;
			}
			
			private function getYPosition():Number{
				return videoHolder.y * 10;
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				
			}
		]]>
	</mx:Script>
</mx:Canvas>
