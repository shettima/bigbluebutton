<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationComplete()" 
	backgroundColor="gray" toolTip="Drag the black box to the area of the screen you wish to share" 
	xmlns:components="org.bigbluebutton.modules.deskShare.view.components.*">
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.deskShare.DeskShareModuleConstants;
			import mx.core.UIComponent;

			private var screenWidth:Number;
			private var screenHeight:Number;
			
			private var startDragX:Number;
			private var startDragY:Number;
			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			
			public var videoHolder:UIComponent;
			private var videoPlayer:Video;
			private var ns:NetStream;
			
			private function onCreationComplete():void{
				screenWidth = Capabilities.screenResolutionX;
				screenHeight = Capabilities.screenResolutionY;
				this.width = screenWidth / 10;
				this.height = screenHeight / 10;
			}
			
			public function startThumbnail(nc:NetConnection, streamName:String):void{
				this.visible = true;
				box.visible = false;
				
				videoHolder = new UIComponent();
				videoPlayer = new Video(box.width, box.height);
				videoPlayer.width = box.width;
				videoPlayer.height = box.height;
				videoHolder.width = box.width;
				videoHolder.height = box.height;
				videoHolder.setActualSize(box.width, box.height);
				videoHolder.addChild(videoPlayer);
				this.addChild(videoHolder);
				videoHolder.x = box.x;
				videoHolder.y = box.y;
				
				videoHolder.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				videoHolder.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				
				ns = new NetStream(nc);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				videoPlayer.attachNetStream(ns);
				ns.play(streamName);
			}
			
			public function stopThumbnail():void{
				this.removeChild(videoHolder);
				videoPlayer.clear();
				videoPlayer = null;
				videoHolder = null;
				this.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				box.visible = true;
			}
			
			private function onMouseDown(e:MouseEvent):void{
				startDragX = videoHolder.x;
				startDragY = videoHolder.y;
				startDragMouseX = this.mouseX;
				startDragMouseY = this.mouseY;
				videoHolder.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseMove(e:MouseEvent):void{
				var newX:Number = startDragX + (this.mouseX - startDragMouseX);
				var newY:Number = startDragY + (this.mouseY - startDragMouseY);
				
				if (newX < 0) videoHolder.x = 0;
				else if (newX > this.width - (box.width+5)) videoHolder.x = this.width - box.width;
				else videoHolder.x = newX;
				
				if (newY < 0) videoHolder.y = 0;
				else if (newY > this.height - (box.height+5)) videoHolder.y = this.height - box.height;
				else videoHolder.y = newY;
				
				ExternalInterface.call("setScreenCoordinates", getXPosition(), getYPosition());
			}
			
			private function onMouseUp(e:MouseEvent):void{
				videoHolder.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseOut(e:MouseEvent):void{
				videoHolder.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function getXPosition():Number{
				return videoHolder.x * 10;
			}
			
			private function getYPosition():Number{
				return videoHolder.y * 10;
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				
			}

		]]>
	</mx:Script>

	<components:ResizableBox id="box" x="10" y="10" width="80" height="60" minWidth="40" minHeight="40" 
		maxWidth="120" maxHeight="90" verticalScrollPolicy="off" horizontalScrollPolicy="off">
        <mx:HBox horizontalGap="0">
        <mx:Label text="{(box.width * 10).toString()}"/>
        <mx:Label text="x"/>
        <mx:Label text="{(box.height * 10).toString()}"/>
        </mx:HBox>
	</components:ResizableBox>
</mx:Canvas>
