<?xml version="1.0" ?>
<project name="bbb-deskshare-applet" basedir="." default="echoall" xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<!-- This build file requires Apache Ant >= 1.7 -->
	<condition property="ant-at-least-7">
  		<antversion atleast="1.7.0"/>
	</condition>

	<!-- base project properties -->
	<property file="build.properties"/>
	<property environment="env"/>
	<property name="dist.dir" value="dist"/>
	<property name="build.dir" value="build"/>
	<property name="lib.dir" value="lib"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	
	<property name="target.extension" value="jar"/>
	<property name="project.name-ver" value="${project.name}-${target.version}"/>
	<property name="target.name" value="deskshareapplet-${target.version}.${target.extension}"/>
	<property name="target.jar" value="${dist.dir}/${target.name}"/>
	<property name="src.dir" value="src/main/java"/>
	<property name="test.src.dir" value="src/test/java"/>
	<property name="test.dir" value="${build.dir}/test"/>
	<property name="test.classes.dir" value="${test.dir}/classes"/>
	<property name="test.data.dir" value="${test.dir}/data"/>
	<property name="test.reports.dir" value="${test.dir}/reports"/>

	<tstamp prefix="build">
		<format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
	</tstamp>

	<path id="compile.classpath">
	  <fileset dir="${lib.dir}">
	    <include name="*.jar"/>
	  </fileset>
	</path>
	
	<path id="compiled.classes.dir">
		<fileset dir="${dist.dir}">
			 <include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="test.compile.classpath">
	   <path refid="compile.classpath"/>
		<path refid="compiled.classes.dir"/>
	</path>

	<path id="test.classpath">
	  <path refid="test.compile.classpath"/>
	  <pathelement location="${test.classes.dir}"/>
	</path>
	  	
	<!-- here is the version of ivy we will use. change this property to try a newer 
         version if you want -->
	<property name="ivy.install.version" value="2.0.0-beta1" />
	<property name="ivy.jar.dir" value="${user.home}/.ivy2/jars" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="skip.download">
    	<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
    	<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
    		 dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    
    <!-- ================================= 
          target: install-ivy         
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    	<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
    	<path id="ivy.lib.path">
    	    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    	</path>
    	<taskdef resource="org/apache/ivy/ant/antlib.xml" 
    		uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>   

    <!-- ================================= 
          target: clean-ivy              
         ================================= -->
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}"/>
	</target>	
	
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<!-- Ivy configuration -->
		<ivy:settings file="ivysettings.xml" id="ivy.instance"/>
		<condition property="ivy.conf.name" value="default">
			<not>
				<isset property="ivy.conf.name"/>
			</not>
		</condition>
		<echo message="Ivy conf name: ${ivy.conf.name}"/>
		<echo message="ivy.local.default.root: ${ivy.local.default.root}"/>
		<ivy:resolve conf="${ivy.conf.name}"/>
		<ivy:retrieve conf="${ivy.conf.name}"/>
	</target>	
	
	<!-- Build Targets -->
	<target name="prepare" depends="clean" description="Setup directories for build">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${dist.dir}"/>
	    <mkdir dir="${test.classes.dir}"/>		
	    <mkdir dir="${test.reports.dir}"/>
	    <mkdir dir="${test.data.dir}"/>
	</target>
	
	<target name="clean" description="Clean directories for build">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<target name="compile" depends="prepare" description="Compiles Desk Share Applet">
		<mkdir dir="${build.dir}/deskshare"/>
		<javac sourcepath="" srcdir="${src.dir}" destdir="${build.dir}/deskshare"
		       optimize="${build.optimize}" verbose="${build.verbose}"
		       fork="${build.fork}" nowarn="${build.nowarn}" deprecation="${build.deprecation}"
		       debug="${debug.state}" compiler="${build.compiler}" source="${java.target_version}" target="${java.target_version}"/>

	</target>
				
	<target name="jar" description="Make Archive" depends="compile">
		<jar destfile="${target.jar}" duplicate="preserve" compress="true">
			<fileset dir="${build.dir}/deskshare">
					<include name="**"/>
			</fileset>
		</jar>
	</target>
	
	<!-- How to sign the applet. From Ant in Action book -->
	<target name="get-password" depends="init-security" description="Prompts for password for keystore">
		<input addproperty="keystore.password" >password for keystore:</input>
		<echo level="verbose">password = ${keystore.password}</echo>
	</target>
	
	<target name="init-security">
		<property name="keystore.dir" location="${user.home}/.secret" />
		<mkdir dir="${keystore.dir}" />
		<chmod file="${keystore.dir}" perm="700"/>
		<property name="keystore"
			location="${keystore.dir}/local.keystore" />
		<property file="${keystore.dir}/keystore.properties" />
		<property name="keystore.alias" value="code.signer"/>
	</target>
	
	<target name="create-signing-key" depends="get-password">
		<genkey	alias="${keystore.alias}" keystore="${keystore}" storepass="${keystore.password}" validity="366" >
			<dname>
				<param name="CN" value="BigBlueButton"/>
				<param name="OU" value="BigBlueButton Project"/>
				<param name="O" value="BigBlueButton"/>
				<param name="C" value="CA"/>
			</dname>
		</genkey>
	</target>
	
	<target name="sign-jar" depends="jar,get-password">
		<signjar jar="${target.jar}"
			alias="${keystore.alias}"
			keystore="${keystore}"
			storepass="${keystore.password}" />
	</target>

	<target name="test-compile" depends="jar">
	    <javac destdir="${test.classes.dir}"
	           debug="true"
	           includeAntRuntime="yes"
	           srcdir="${test.src.dir}">
	      <classpath refid="test.compile.classpath"/>
	    </javac>
		<taskdef name="testng" classpathref="compile.classpath"
				          classname="org.testng.TestNGAntTask" />
	</target>
	
	<target name="test-ng" depends="test-compile">
	      <echo message="running tests"/>
	      <testng classpathref="test.classpath" outputDir="${test.data.dir}">
	         <xmlfileset dir="." includes="testng.xml"/>
	         <jvmarg value="-ea" />
	      </testng>
	</target>

	<target name="testng-reports" depends="test-ng">
	  <junitreport todir="${test.data.dir}">
	    <fileset dir="${test.data.dir}">
	      <include name="*/*.xml"/>
	    </fileset>
	 
	    <report format="frames" todir="${test.reports.dir}"/>
	  </junitreport>
	</target>
		
	<target name="all" depends="clean, prepare, compile, jar" description="Run all server tasks"/>

	<target name="usage">
		<echo message="Type ant -p for available targets"/>
	</target>
	
	<target name="diagnostics"  
	    description="diagnostics">
		<diagnostics/>
	</target>
	
	<target name="echoall">
		<echo>${java.home}</echo>
		<echoproperties/>
	</target>
</project>
