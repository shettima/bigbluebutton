<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:panzoom="com.adobe.wheelerstreet.fig.panzoom.*"
	xmlns:local="*"
    width="100%" height="100%" 
    horizontalAlign="center" paddingBottom="5" 
    creationComplete="init()" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    rollOut="hideCursor()">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{ZoomEvent.RESTORE}" method="handleRestoreSlideSizeEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <!--mate:Listener type="{ZoomEvent.RESIZE}" method="handleResizeSlideEvent" /-->
    <mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="handleWindowResizeEvent"/>
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import mx.controls.Alert;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;

			private var slideRealWidth:int;
			private var slideRealHeight:int;
			private static const MAX_ZOOM:int = 4;
			
			private var presentersXOffset:Number = 0;
			private var presentersYOffset:Number = 0;
			private var presentersWidthRatio:Number = 1;
			private var presentersHeightRatio:Number = 1;
			
			private var canvasMouseXOnMouseDown:int;
			private	var canvasMouseYOnMouseDown:int;
			private var lastMouseXPosition:int;
			private var lastMouseYPosition:int;
			
			private var loaderMouseXOnMouseDown:int;
			private	var loaderMouseYOnMouseDown:int;
			private var loaderXOnMouseDown:int;
			private var loaderYOnMouseDown:int;
				
			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			private var startDragX:Number;
			private var startDragY:Number;
			
			private var xPercent:Number;
			private var yPercent:Number;
			
			private var makeSlideFitToWindow:Boolean = true;
						
			private var cursor:Shape;
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
				
			private function init():void{
				swfSlideLoader.width = slideCanvas.width;
				swfSlideLoader.height = slideCanvas.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				slideCanvas.rawChildren.addChild(cursor);
				cursor.visible = false;
			}
					
			private function mouseDown(e:MouseEvent):void{						
				canvasMouseXOnMouseDown = slideCanvas.mouseX;
				canvasMouseYOnMouseDown = slideCanvas.mouseY;
				loaderXOnMouseDown = loaderX();
				loaderYOnMouseDown = loaderY();
				
				LogUtil.debug("mouseDown[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() + "," + canvasMouseX() + "," + canvasMouseY()
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," + slideMouseX() + "," + slideMouseY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + "," + loaderMouseX() + "," + loaderMouseY() + ")]");				
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseMove(e:MouseEvent):void {	
				// Get the cursor position on the slideCanvas.
				var currentCanvasMouseX:int = slideCanvas.mouseX;
				var currentCanvasMouseY:int = slideCanvas.mouseY;
				
				// Translate the slideCanvas cursor position to the swfSlideLoader coordinate.
				// We need to do this to maintain sync with the other clients.
				var deltaCanvasMouseX:int = currentCanvasMouseX - canvasMouseXOnMouseDown;
				var deltaCanvasMouseY:int = currentCanvasMouseY - canvasMouseYOnMouseDown;
								
//				LogUtil.debug("before: mouseMove[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() 
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");	
								
				swfSlideLoader.x = loaderXOnMouseDown + deltaCanvasMouseX;
				swfSlideLoader.y = loaderYOnMouseDown + deltaCanvasMouseY;
				makeSlideFitLoader();
				
//				LogUtil.debug("Delta(" + deltaCanvasMouseX + "," + deltaCanvasMouseY + ")");
//				LogUtil.debug("after: mouseMove[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() 
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");	


				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = getLoaderXOffsetWithCanvas();
				presentEvent.yOffset = getLoaderYOffsetWithCanvas();
				presentEvent.slideToCanvasWidthRatio = getWidthRatioBetweenCanvasAndLoader();
				presentEvent.slideToCanvasHeightRatio = getHeightRatioBetweenCanvasAndLoader();
				dispatchEvent(presentEvent);
			}

			private function handleMoveEvent(e:MoveEvent):void{
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
				
				if (isPresenter) {
					LogUtil.debug("IS PRESENTER - NOT HANDLING MOVE EVENT");
					return;
				} else {
					LogUtil.debug("IS NOT PRESENTER - HANDLING MOVE EVENT");
				}
				
//				LogUtil.debug("before: handleMoveEventXXXX[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() + "," + canvasMouseX() + "," + canvasMouseY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," + slideMouseX() + "," + slideMouseY()
//								+ ")loader(" + loaderWidth() + "," + loaderHeight() + "," + loaderX() + "," + loaderY() + "," + loaderMouseX() + "," + loaderMouseY() + ")] ");
				
				resizeLoaderInRelationToCanvas(e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
				moveLoaderInRelationToCanvas(e.xOffset, e.yOffset);
				makeSlideFitLoader();
								
//				LogUtil.debug("after: handleMoveEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() + "," + canvasMouseX() + "," + canvasMouseY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," + slideMouseX() + "," + slideMouseY()
//								+ ")loader(" + loaderWidth() + "," + loaderHeight() + "," + loaderX() + "," + loaderY() + "," + loaderMouseX() + "," + loaderMouseY() + ")]");
			}
					
			private function mouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function handleWindowResizeEvent(event:WindowResizedEvent):void {
				var oldCanvasWidth:int = canvasWidth();
				var oldCanvasHeight:int = canvasHeight();
				
//				LogUtil.debug("before: handleWindowResizeEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//						+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//						+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY()+ ")]");	
						
				slideCanvas.width = event.width;
				slideCanvas.height = event.height;
				
				resizeLoaderInRelationToCanvas(presentersWidthRatio, presentersHeightRatio);
				moveLoaderInRelationToCanvas(presentersXOffset, presentersYOffset);					
				makeSlideFitLoader();
							
//				LogUtil.debug("after: handleWindowResizeEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
			}
						
			private function makeSlideFitLoader():void {
				if (swfSlideLoader.content == null) return;
				swfSlideLoader.content.x = loaderX();
				swfSlideLoader.content.y = loaderY();
				swfSlideLoader.content.width = swfSlideLoader.width;
				swfSlideLoader.content.height = swfSlideLoader.height;	
			}
									
			private function fitSlideToWindow():void{
				if (swfSlideLoader.content == null) return;
//				LogUtil.debug("before: fitSlideToWindow[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY()+ ")]");	
				
				swfSlideLoader.width = canvasWidth();
				swfSlideLoader.height = canvasHeight();
				
				makeSlideFitLoader();
				
//				LogUtil.debug("after: fitSlideToWindow[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");				
			}

			private function onMouseWheelZoomEvent(e:MouseEvent):void {
//				LogUtil.debug("before: onMouseWheelZoomEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," 
//								+ swfSlideLoader.content.scaleX + "," + swfSlideLoader.content.scaleY 
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + "," 
//								+ swfSlideLoader.scaleX + "," + swfSlideLoader.scaleY + ")] " + e.delta);
				
				var lastLoaderX:int = loaderX();
				var lastLoaderY:int = loaderY();
				var lastLoaderWidth:int = loaderWidth();
				var lastLoaderHeight:int = loaderHeight();
				
				var newLoaderWidth:int = swfSlideLoader.width + (swfSlideLoader.width * e.delta/100);
				var newLoaderHeight:int = swfSlideLoader.height + (swfSlideLoader.height * e.delta/100);
				
				if (isZoomingOut(e.delta) && (willSlideBeSmallerThanCanvas(newLoaderWidth, newLoaderHeight))) {
//					LogUtil.debug("Resetting slide size");
					swfSlideLoader.width = canvasWidth();
					swfSlideLoader.height = canvasHeight();
					swfSlideLoader.x = 0;
					swfSlideLoader.y = 0;
				} else if ((newLoaderWidth <= MAX_ZOOM * slideRealWidth) && (newLoaderHeight <= MAX_ZOOM * slideRealHeight)) {
//					LogUtil.debug("Calculating slide size");
					swfSlideLoader.width += swfSlideLoader.width * e.delta/100;
					swfSlideLoader.height += swfSlideLoader.height * e.delta/100;
					swfSlideLoader.x = swfSlideLoader.x - e.delta;
					swfSlideLoader.y = swfSlideLoader.y - e.delta;
				} 
													
				makeSlideFitLoader();
				
//				LogUtil.debug("after: onMouseWheelZoomEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," 
//								+ swfSlideLoader.content.scaleX + "," + swfSlideLoader.content.scaleY 
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + "," 
//								+ swfSlideLoader.scaleX + "," + swfSlideLoader.scaleY + ")] " + e.delta);

				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xOffset = getLoaderXOffsetWithCanvas();
				presentEvent.yOffset = getLoaderYOffsetWithCanvas();
				presentEvent.slideToCanvasWidthRatio = getWidthRatioBetweenCanvasAndLoader();
				presentEvent.slideToCanvasHeightRatio = getHeightRatioBetweenCanvasAndLoader();
				dispatchEvent(presentEvent);
			}
			
			private function isZoomingOut(delta:int):Boolean {
				return delta < 0;
			}
			private function isSlideEqualCanvas():Boolean {
				return (loaderWidth() == canvasWidth()) && (loaderHeight() == canvasHeight())
			}
			
			private function willSlideBeSmallerThanCanvas(newSlideWidth:int, newSlideHeight:int):Boolean {
				return (newSlideWidth <= canvasWidth()) || (newSlideHeight <= canvasHeight())
			}
						
			private function handleZoomEvent(e:ZoomEvent):void {
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
				
				if (isPresenter) return;
				
//				LogUtil.debug("before: handleZoomEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY()
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," 
//								+ swfSlideLoader.content.scaleX + "," + swfSlideLoader.content.scaleY 
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + "," 
//								+ swfSlideLoader.scaleX + "," + swfSlideLoader.scaleY + ")] ");
								
				var oldLoaderWidth:int = loaderWidth();
				var oldLoaderHeight:int = loaderHeight();
				var oldLoaderX:int = loaderX();
				var oldLoaderY:int = loaderY();
				
				resizeLoaderInRelationToCanvas(e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
				moveLoaderInRelationToCanvas(e.xOffset, e.yOffset);
				makeSlideFitLoader();
				
//				LogUtil.debug("after: handleZoomEvent[canvas:("+ canvasWidth() + "," + canvasHeight() + "," + canvasX() + "," + canvasY() 
//								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY() + "," 
//								+ swfSlideLoader.content.scaleX + "," + swfSlideLoader.content.scaleY
//								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + "," 
//								+ swfSlideLoader.scaleX + "," + swfSlideLoader.scaleY + ")]");
			}
			
			private function handleResizeSlideEvent(e:ZoomEvent):void{
				swfSlideLoader.content.scaleX = e.zoomPercentage;
				swfSlideLoader.content.scaleY = e.zoomPercentage;
				makeSlideFitLoader();
			}
						
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				swfSlideLoader.source = e.slide;
			}
			
			private function restoreSlideSize():void {
				if (swfSlideLoader.content == null) return;
				swfSlideLoader.scaleX = 1;
				swfSlideLoader.scaleY = 1;
				swfSlideLoader.content.scaleX = 1;
				swfSlideLoader.content.scaleY = 1;
				swfSlideLoader.content.x = 0;
				swfSlideLoader.content.y = 0;
				swfSlideLoader.x = 0;
				swfSlideLoader.y = 0;
			}
			
			private function handleRestoreSlideSizeEvent(e:ZoomEvent):void{
				restoreSlideSize();
			}
			
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				this.isPresenter = false;
				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, mouseOut);
			//	slideCanvas.removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				this.isPresenter = true;
				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, mouseOut);
			//	slideCanvas.addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (swfSlideLoader.content == null) return;

				// Get the cursor position on the slideCanvas.
				var canvasMouseX:int = slideCanvas.mouseX;
				var canvasMouseY:int = slideCanvas.mouseY;
								
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);				
				command.xPercent = canvasMouseX / canvasWidth();
				command.yPercent = canvasMouseY / canvasHeight();				
				dispatchEvent(command);

			}
			
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (swfSlideLoader.content == null) return;
				cursor.x = e.xPercent * canvasWidth();
				cursor.y = e.yPercent * canvasHeight();
								
				if (isCursorOutsideWindow(e)) {
					hideCursor()
				}
				else {
					showCursor();
				}	
			}
			
			private function savePresentersSettings(xOffset:Number, yOffset:Number, widthRatio:Number, heightRatio:Number):void {
				presentersXOffset = xOffset;
				presentersYOffset = yOffset;
				presentersWidthRatio = widthRatio;
				presentersHeightRatio = heightRatio;
			}
			
			/*********************
			 * Helper functions to determine offsets
			 * *******************/
			
			private function getLoaderXOffsetWithCanvas():Number {
				return loaderX()/loaderWidth();
			}
			
			private function getLoaderYOffsetWithCanvas():Number {
				return loaderY()/loaderHeight();
			}
			
			private function getWidthRatioBetweenCanvasAndLoader():Number {
				return loaderWidth()/canvasWidth();
			}
			
			private function getHeightRatioBetweenCanvasAndLoader():Number {
				return loaderHeight()/canvasHeight();
			}
			
			private function resizeLoaderInRelationToCanvas(widthRatio:Number, heightRatio:Number):void {
				swfSlideLoader.width = canvasWidth() * widthRatio; 
				swfSlideLoader.height = canvasHeight() * heightRatio;
			}
						
			private function moveLoaderInRelationToCanvas(loaderXOffset:Number, loaderYOffset:Number):void {
				swfSlideLoader.x = swfSlideLoader.width * loaderXOffset;
				swfSlideLoader.y = swfSlideLoader.height * loaderYOffset;
			}
			
			
			/***********************************************************************
			 * Bounds helper functions
			 ***********************************************************************/
			private function isRightEdgeAligned():Boolean {
				return ((Math.abs(slideX()) + canvasWidth()) >= slideWidth()); 
			}
			
			private function isTopEdgeAligned():Boolean {
				return slideY() == canvasY();
			} 
			
			private function isBottomEdgeAligned():Boolean {
				return ((Math.abs(slideY()) + canvasHeight()) >= slideHeight());
			}
			
			private function isLeftEdgeAligned():Boolean {
				return slideX() == canvasX();
			}
			
			private function snapSlideToTopOfCanvas():void {
				swfSlideLoader.y = swfSlideLoader.content.y = canvasY();
			}
			
			private function snapSlideToLeftSideOfCanvas():void {
				swfSlideLoader.x = swfSlideLoader.content.x = canvasX();
			}
			
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				swfSlideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {				
				slideRealWidth = slideWidth();
				slideRealHeight = slideHeight();
				
				restoreSlideSize();
//				LogUtil.debug("handleSlideLoadCompleteEvent[" + slideWidth() + "," + slideHeight() + "]");
				
				fitSlideToWindow();
				var dispatcher:Dispatcher = new Dispatcher();
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideWidth();
				dispEvent.slideHeight = slideHeight();
				dispatcher.dispatchEvent(dispEvent);
				
			}
						
			/************************************************************
			 * Methods supporting text selection within the slide.
			 ************************************************************/
			public function turnOnTextSelection():void{
				slideClip = swfSlideLoader.content as MovieClip;
				slideText = slideClip.textSnapshot;
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onTextMouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, onTextMouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				slideText.setSelectColor(0xFFFF00);
				slideText.setSelected(0, slideText.charCount, true);
				Alert.show(slideText.getSelectedText());
				
				var runInfo:Array = slideText.getTextRunInfo(0,1);
				var highlight:Shape = new Shape();
				var h:Number = runInfo[0].height;
				highlight.graphics.lineStyle(4,0xFF0000);
				highlight.graphics.drawRect(0 ,0 , Math.abs(runInfo[0].height * 10), Math.abs(runInfo[0].height * 10));
				slideClip.addChild(highlight);
				highlight.x = Math.abs(runInfo[0].matrix_tx);
				highlight.y = Math.abs(runInfo[0].matrix_ty);
			}
			
			private function onTextMouseDown(e:MouseEvent):void{
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				firstChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
				slideText.setSelected(0, slideText.charCount, false);
			}
			
			private function onTextMouseMove(e:MouseEvent):void{
				if (firstChar != -1){
					slideText.setSelected(0, slideText.charCount, false)
					
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar < lastChar){
						slideText.setSelected(firstChar, lastChar + 1, true);
					} else{
						slideText.setSelected(lastChar, firstChar + 1, true);
					}
				}
			}
			
			private function onTextMouseUp(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				
				if (firstChar >= 0){
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar != lastChar){
						if (firstChar < lastChar){
							slideText.setSelected(firstChar, lastChar + 1, true);
						} else{
							slideText.setSelected(lastChar, firstChar + 1, true);
						}
					}
					firstChar = -1;
					lastChar = -1;
				}
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
			}
			
			private function onTextMouseOut(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				slideText.setSelected(0, slideText.charCount, false);
			}

			/*****************************************
			 * Helper functions
			 *****************************************/
			/****** Slide/Content ************/ 
			private function slideX():int {
				return swfSlideLoader.content.x;
			} 
			
			private function slideY():int {
				return swfSlideLoader.content.y;
			}
			
			private function slideMouseX():int {
				return swfSlideLoader.content.mouseX;
			}
			
			private function slideMouseY():int {
				return swfSlideLoader.content.mouseY;
			}
			
			private function slideWidth():int {
				return swfSlideLoader.content.width;
			}
			
			private function slideHeight():int {
				return swfSlideLoader.content.height;
			}
			
			/******* Canvas *****/
			private function canvasX():int {
				return slideCanvas.x;
			}
			
			private function canvasY():int {
				return slideCanvas.y;
			}
			
			private function canvasMouseX():int {
				return slideCanvas.mouseX;
			}
			
			private function canvasMouseY():int {
				return slideCanvas.mouseY;
			}
			
			private function canvasWidth():int {
				return slideCanvas.width;
			}
			
			private function canvasHeight():int {
				return slideCanvas.height;
			}
			
			/******** Loader ********/
			private function loaderX():int {
				return swfSlideLoader.x;
			}
			
			private function loaderY():int {
				return swfSlideLoader.y;
			}
			
			private function loaderMouseX():int {
				return swfSlideLoader.mouseX;
			}
			
			private function loaderMouseY():int {
				return swfSlideLoader.mouseY;
			}
			
			private function loaderWidth():int {
				return swfSlideLoader.width;
			}
			
			private function loaderHeight():int {
				return swfSlideLoader.height;
			}
						
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}			
		]]>
	</mx:Script>
	
	<mx:Canvas id="slideCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">  
		<mx:SWFLoader id="swfSlideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>    	
	</mx:Canvas>  
		      		 
</mx:VBox>
