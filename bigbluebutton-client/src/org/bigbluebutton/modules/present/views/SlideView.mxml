<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:panzoom="com.adobe.wheelerstreet.fig.panzoom.*"
	xmlns:local="*"
    width="100%" height="100%" 
    horizontalAlign="center" paddingBottom="5" 
    creationComplete="onCreationComplete()" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    rollOut="hideCursor()">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="handleWindowResizeEvent"/>
    <mate:Listener type="{PresenterCommands.RESIZE}" method="handleSlideResizeEvent"/>
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import mx.controls.Alert;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;

			private var zoomPercentage:int = 100;
			private static const ZOOM_STEP:int = 5;
			
			/**
			 * Variables that holds the presenter's locations of the
			 * loader so we can move the participant's slides in the
			 * same scale to maintain sync on the presenter's cursor.
			 */ 
			private var presentersLoaderXOffsetFromCanvas:Number = 0;
			private var presentersLoaderYOffsetFromCanvas:Number = 0;
			
			/**
			 * Variables that stores the presenter's ratio between
			 * loader and canvas. We need to size the slide with the
			 * same scale as the presenter so that the cursor syncs
			 * properly.
			 */
			private var presentersLoaderCanvasWidthRatio:Number = 1;
			private var presentersLoaderCanvasHeightRatio:Number = 1;
			
			private var canvasMouseXOnMouseDown:int;
			private	var canvasMouseYOnMouseDown:int;
			private var loaderXOnMouseDown:int;
			private var loaderYOnMouseDown:int;
						
			private var cursor:Shape;
			
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
				
			private function onCreationComplete():void{
				swfSlideLoader.width = canvasWidth();
				swfSlideLoader.height = canvasHeight();
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				slideCanvas.rawChildren.addChild(cursor);
				cursor.visible = false;
			}
					
			private function onMouseDown(e:MouseEvent):void{						
				canvasMouseXOnMouseDown = canvasMouseX();
				canvasMouseYOnMouseDown = canvasMouseY();
				loaderXOnMouseDown = loaderX();
				loaderYOnMouseDown = loaderY();
							
				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseMove(e:MouseEvent):void {	
				var deltaCanvasMouseX:int = canvasMouseX() - canvasMouseXOnMouseDown;
				var deltaCanvasMouseY:int = canvasMouseY() - canvasMouseYOnMouseDown;
													
				moveLoaderTo(loaderXOnMouseDown + deltaCanvasMouseX, loaderYOnMouseDown + deltaCanvasMouseY);				
				fitSlideToLoader();				
				notifyOtherParticipantsOfSlideMoving();
			}
			
			private function moveLoaderTo(xOffset:int, yOffset:int):void {
				swfSlideLoader.x = xOffset;
				swfSlideLoader.y = yOffset;
			}
			
			private function notifyOtherParticipantsOfSlideMoving():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = getLoaderXOffsetWithCanvas();
				presentEvent.yOffset = getLoaderYOffsetWithCanvas();
				presentEvent.slideToCanvasWidthRatio = getWidthRatioBetweenCanvasAndLoader();
				presentEvent.slideToCanvasHeightRatio = getHeightRatioBetweenCanvasAndLoader();
				dispatchEvent(presentEvent);
			}

			private function handleMoveEvent(e:MoveEvent):void{
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);				
				if (participantShouldHandleMessage()) {
					resizeAndMoveLoaderInRelationToCanvas();
				}				
			}
			
			private function participantShouldHandleMessage():Boolean {
				// If presenter, then ignore the message because the presenter was the one who sent the event.
				return ! isPresenter;
			}
					
			private function onMouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function handleWindowResizeEvent(event:WindowResizedEvent):void {						
				slideCanvas.width = event.width;
				slideCanvas.height = event.height;
				resizeAndMoveLoaderInRelationToCanvas();				
			}
						
			private function resizeAndMoveLoaderInRelationToCanvas():void {
				resizeLoaderInRelationToCanvas(presentersLoaderCanvasWidthRatio, presentersLoaderCanvasHeightRatio);
				moveLoaderInRelationToCanvas(presentersLoaderXOffsetFromCanvas, presentersLoaderYOffsetFromCanvas);					
				fitSlideToLoader();
			}
						
			private function fitSlideToLoader():void {
				if (noSlideContentLoaded()) return;
				
				swfSlideLoader.content.x = loaderX();
				swfSlideLoader.content.y = loaderY();
				swfSlideLoader.content.width = loaderWidth();
				swfSlideLoader.content.height = loaderHeight();	
			}
									
			private function fitLoaderToCanvas():void{
				if (noSlideContentLoaded()) return;
				
				swfSlideLoader.width = canvasWidth();
				swfSlideLoader.height = canvasHeight();
				swfSlideLoader.x = canvasX();
				swfSlideLoader.y = canvasY();
				
				fitSlideToLoader();						
			}

			private function resizeAndMoveLoaderBy(percent:Number):void {	
				// Save the old loader dimensions. We need these to calculate
				// the new position of the loader;
				var oldLoaderHeight:int = loaderHeight();
				var oldLoaderWidth:int = loaderWidth();
							
				resizeLoaderInRelationToCanvas(percent/100, percent/100);				
				moveLoaderTo(calculateNewLoaderX(oldLoaderWidth), calculateNewLoaderY(oldLoaderHeight));
				fitSlideToLoader();
			}
			
			private function calculateNewLoaderY(oldLoaderHeight:int):int {				
				var deltaPercentHeight:Number = (loaderHeight() - oldLoaderHeight) /oldLoaderHeight;
								
				var newLoaderY:int = (loaderY()/loaderHeight()) * deltaPercentHeight;				
				if (newLoaderY == 0) {
					newLoaderY = loaderY() - (deltaPercentHeight * 100);
				} else {
					newLoaderY = loaderY() - newLoaderY;
				}
				
				return newLoaderY;
			}
			
			private function calculateNewLoaderX(oldLoaderWidth:int):int {				
				var deltaPercentWidth:Number = (loaderWidth() - oldLoaderWidth) / oldLoaderWidth;
				var newLoaderX:int = (loaderX()/loaderWidth()) * deltaPercentWidth;
				if (newLoaderX == 0) {
					newLoaderX = loaderX() - (deltaPercentWidth * 100);
				} else {
					newLoaderX = loaderX() - newLoaderX;
				}		
				
				return newLoaderX;		
			}
			
			private function handleSlideResizeEvent(event:PresenterCommands):void {
				zoomLoaderBy(event.newSizeInPercent);
			}
			
			private function zoomLoaderBy(percent:Number):void {				
				if (percent < 100) {
					zoomPercentage = 100;
				} else if (percent > 400) {
					zoomPercentage = 400;
				} else {
					zoomPercentage = percent;
				}
				
 				if (zoomPercentage == 100) {
 					fitLoaderToCanvas();
 				} else {
 					resizeAndMoveLoaderBy(zoomPercentage);
 				}
				notifyOthersOfZoomEvent();
			}
			
			private function onMouseWheelZoomEvent(e:MouseEvent):void {
				if (presenterIsZoomingOut(e.delta)) {
					zoomPercentage -= ZOOM_STEP;
				} else {
					zoomPercentage += ZOOM_STEP;
				}
				
				zoomLoaderBy(zoomPercentage);	
				notifyListenersOfSlideResize(zoomPercentage);			
			}
			
			private function notifyListenersOfSlideResize(percent:Number):void {
				var event:SlideResizedEvent = new SlideResizedEvent();
				event.percent = percent;
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(event);
			}
						
			private function notifyOthersOfZoomEvent():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xOffset = getLoaderXOffsetWithCanvas();
				presentEvent.yOffset = getLoaderYOffsetWithCanvas();
				presentEvent.slideToCanvasWidthRatio = getWidthRatioBetweenCanvasAndLoader();
				presentEvent.slideToCanvasHeightRatio = getHeightRatioBetweenCanvasAndLoader();
				dispatchEvent(presentEvent);
			}
			
			private function presenterIsZoomingOut(delta:Number):Boolean {
				// If delta is negative, the presenter is zooming-out of the presentation.
				return delta < 0;
			}
									
			private function handleZoomEvent(e:ZoomEvent):void {
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);													
				if (participantShouldHandleMessage()) {
					resizeAndMoveLoaderInRelationToCanvas();
				}
			}
									
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				swfSlideLoader.source = e.slide;
			}
						
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(false);
				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(true);
				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function participantIsNowPresenter(presenter:Boolean):void {
				this.isPresenter = presenter;
			}
			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (noSlideContentLoaded()) return;				
				notifyOthersOfPresentersCursorPosition(canvasMouseX(), canvasMouseY());
			}
			
			private function notifyOthersOfPresentersCursorPosition(cursorXPosition:int, cursorYPosition:int):void {
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);				
				command.xPercent = cursorXPosition / canvasWidth();
				command.yPercent = cursorYPosition / canvasHeight();				
				dispatchEvent(command);
			}
			
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (noSlideContentLoaded()) return;
				
				cursor.x = e.xPercent * canvasWidth();
				cursor.y = e.yPercent * canvasHeight();
								
				if (isCursorOutsideWindow(e)) {
					hideCursor()
				} else {
					showCursor();
				}	
			}
			
			private function noSlideContentLoaded():Boolean {
				return swfSlideLoader.content == null
			}
			
			private function savePresentersSettings(xOffset:Number, yOffset:Number, widthRatio:Number, heightRatio:Number):void {
				presentersLoaderXOffsetFromCanvas = xOffset;
				presentersLoaderYOffsetFromCanvas = yOffset;
				presentersLoaderCanvasWidthRatio = widthRatio;
				presentersLoaderCanvasHeightRatio = heightRatio;
			}
			
			/******************************************************
			 * Helper functions to determine offsets
			 ******************************************************/
			
			private function getLoaderXOffsetWithCanvas():Number {
				return loaderX()/loaderWidth();
			}
			
			private function getLoaderYOffsetWithCanvas():Number {
				return loaderY()/loaderHeight();
			}
			
			private function getWidthRatioBetweenCanvasAndLoader():Number {
				return loaderWidth()/canvasWidth();
			}
			
			private function getHeightRatioBetweenCanvasAndLoader():Number {
				return loaderHeight()/canvasHeight();
			}
			
			private function resizeLoaderInRelationToCanvas(widthRatio:Number, heightRatio:Number):void {
				swfSlideLoader.width = canvasWidth() * widthRatio; 
				swfSlideLoader.height = canvasHeight() * heightRatio;
			}
						
			private function moveLoaderInRelationToCanvas(loaderXOffset:Number, loaderYOffset:Number):void {
				swfSlideLoader.x = loaderWidth() * loaderXOffset;
				swfSlideLoader.y = loaderHeight() * loaderYOffset;
			}
			
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				swfSlideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {				
				fitLoaderToCanvas();
				dispatchNewSlideDisplayedEvent(slideWidth(), slideHeight());				
			}
			
			private function dispatchNewSlideDisplayedEvent(slideRealWidth:int, slideRealHeight:int):void {
				var dispatcher:Dispatcher = new Dispatcher();
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);
			}
						
			/************************************************************
			 * Methods supporting text selection within the slide.
			 ************************************************************/
			public function turnOnTextSelection():void{
				slideClip = swfSlideLoader.content as MovieClip;
				slideText = slideClip.textSnapshot;
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onTextMouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, onTextMouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				slideText.setSelectColor(0xFFFF00);
			}
			
			private function onTextMouseDown(e:MouseEvent):void{
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				//NOTE: hitTestTextNearPos() seems to be failing me right now. Something about font metrics according to documentation. -Denis Zgonjanin, Jan 15 2010
				firstChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
				selectText(0, slideText.charCount, false);
			}
			
			private function onTextMouseMove(e:MouseEvent):void{
				if (firstChar != -1){
					selectText(0, slideText.charCount, false)
					
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar < lastChar){
						selectText(firstChar, lastChar + 1, true);
					} else{
						selectText(lastChar, firstChar + 1, true);
					}
				}
			}
			
			private function onTextMouseUp(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				
				if (firstChar >= 0){
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar != lastChar){
						if (firstChar < lastChar){
							selectText(firstChar, lastChar + 1, true);
						} else{
							selectText(lastChar, firstChar + 1, true);
						}
					}
					firstChar = -1;
					lastChar = -1;
				}
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
			}
			
			private function onTextMouseOut(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				selectText(0, slideText.charCount, false);
			}

			private function selectText(beginIndex:int, endIndex:int, select:Boolean):void{
				if (!select){
					//remove all highlight shapes
					return;
				}
				
				//first, separate text into lines in case user selects multiple lines
				var text:String = slideText.getText(beginIndex, endIndex, true);
				var lines:Array = text.split("\n");
				
				//Highlight each row independantly
				var characterIndex:int = beginIndex;
				for (var line:int = 0; line<lines.length; line++){
					var lineLength:int = (lines[line] as String).length;
					var textInfo:Array = slideText.getTextRunInfo(characterIndex, characterIndex + lineLength);
					var charWidth:Number = textInfo[1].matrix_tx - textInfo[0].matrix_tx; //how wide is one character
					var lineWidth:Number = textInfo[textInfo.length - 1].matrix_tx - textInfo[0].matrix_tx + charWidth; //beginning to end of line plus 1 character lenght
					var charHeight:Number = charWidth * 1.5;//Totally arbitrary
					var begginingX:Number = textInfo[0].matrix_tx;
					var begginingY:Number = textInfo[0].matrix_ty;
					
					var highlight:Shape = new Shape();
					highlight.graphics.lineStyle(2,0xFF0000);
					highlight.graphics.drawRect(0,0,lineWidth,charHeight);
					slideClip.addChild(highlight);
					highlight.x = Math.abs(begginingX);
					highlight.y = Math.abs(begginingY);	
				}
			}
			/*****************************************
			 * Helper functions
			 *****************************************/
			/****** Slide/Content ************/ 
			private function slideX():int {
				return swfSlideLoader.content.x;
			} 
			
			private function slideY():int {
				return swfSlideLoader.content.y;
			}
			
			private function slideMouseX():int {
				return swfSlideLoader.content.mouseX;
			}
			
			private function slideMouseY():int {
				return swfSlideLoader.content.mouseY;
			}
			
			private function slideWidth():int {
				return swfSlideLoader.content.width;
			}
			
			private function slideHeight():int {
				return swfSlideLoader.content.height;
			}
			
			/************ Canvas *****************/
			private function canvasX():int {
				return slideCanvas.x;
			}
			
			private function canvasY():int {
				return slideCanvas.y;
			}
			
			private function canvasMouseX():int {
				return slideCanvas.mouseX;
			}
			
			private function canvasMouseY():int {
				return slideCanvas.mouseY;
			}
			
			private function canvasWidth():int {
				return slideCanvas.width;
			}
			
			private function canvasHeight():int {
				return slideCanvas.height;
			}
			
			/************ Loader ******************/
			private function loaderX():int {
				return swfSlideLoader.x;
			}
			
			private function loaderY():int {
				return swfSlideLoader.y;
			}
			
			private function loaderMouseX():int {
				return swfSlideLoader.mouseX;
			}
			
			private function loaderMouseY():int {
				return swfSlideLoader.mouseY;
			}
			
			private function loaderWidth():int {
				return swfSlideLoader.width;
			}
			
			private function loaderHeight():int {
				return swfSlideLoader.height;
			}
						
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}			
		]]>
	</mx:Script>
	
	<mx:Canvas id="slideCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">  
		<mx:SWFLoader id="swfSlideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>    	
	</mx:Canvas>  
		      		 
</mx:VBox>
