<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
    width="100%" height="100%" 
    horizontalAlign="center" paddingBottom="5" 
    creationComplete="init()" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
    xmlns:panzoom="com.adobe.wheelerstreet.fig.panzoom.*" xmlns:local="*"
    resize="onResize()" xmlns:mate="http://mate.asfusion.com/" rollOut="hideCursor()">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="zoomCallback" />
    <mate:Listener type="{ZoomEvent.RESTORE}" method="restoreNormalZoom" />
    <mate:Listener type="{MoveEvent.MOVE}" method="moveCallback" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="switchToPresenter" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="switchToViewer" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="updateCursorCallback" />
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import mx.controls.Alert;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;

			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			private var startDragX:Number;
			private var startDragY:Number;
			
			private var xPercent:Number;
			private var yPercent:Number;
			
			private var cursor:Shape;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
				
			private function init():void{
				myLoader.width = imageCanvas.width;
				myLoader.height = imageCanvas.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				imageCanvas.rawChildren.addChild(cursor);
				cursor.visible = false;
			}
			
			private function zoom(e:MouseEvent):void{
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.zoomPercentage = e.delta/100;
				dispatchEvent(presentEvent);
			}
		
			private function mouseDown(e:MouseEvent):void{		
				startDragX = myLoader.x;
				startDragY = myLoader.y;
				startDragMouseX = imageCanvas.mouseX;
				startDragMouseY = imageCanvas.mouseY;
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseMove(e:MouseEvent):void{	
				var newX:Number = startDragX + (imageCanvas.mouseX - startDragMouseX);
				var newY:Number = startDragY + (imageCanvas.mouseY - startDragMouseY);
				
				var xOffset:Number = newX / imageCanvas.width;
				var yOffset:Number = newY / imageCanvas.height;
			
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = xOffset;
				presentEvent.yOffset = yOffset;
				dispatchEvent(presentEvent);
			}
		
			private function mouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			public function onResize():void{
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.RESET_ZOOM);
				presentEvent.zoomPercentage = 1;
				dispatchEvent(presentEvent);
			}
			
			private function zoomCallback(e:ZoomEvent):void{
				myLoader.content.scaleX += e.zoomPercentage;
				myLoader.content.scaleY += e.zoomPercentage;
			}
			
			private function moveCallback(e:MoveEvent):void{
				var newX:Number = e.slideXPosition * imageCanvas.width;
				var newY:Number = e.slideYPosition * imageCanvas.height;
				
				if (newX <= 0) myLoader.x = newX;
				if (newY <= 0) myLoader.y = newY;
			}
			
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				myLoader.source = e.slide;
			}
			
			private function restoreNormalZoom(e:ZoomEvent):void{
				myLoader.width = this.width;
				myLoader.x = 0;
				myLoader.y = 0;
			}
			
			private function switchToViewer(e:MadePresenterEvent):void{
				this.isPresenter = false;
				//this.cursor.visible = true;
				removeEventListener(MouseEvent.MOUSE_WHEEL, zoom);
				myLoader.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				myLoader.removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
				myLoader.removeEventListener(MouseEvent.MOUSE_OUT, mouseOut);
				imageCanvas.removeEventListener(MouseEvent.MOUSE_MOVE, sendCursorUpdate);
			}
			
			private function switchToPresenter(e:MadePresenterEvent):void{
				this.isPresenter = true;
				//this.cursor.visible = false;
				addEventListener(MouseEvent.MOUSE_WHEEL, zoom);
				myLoader.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				myLoader.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				myLoader.addEventListener(MouseEvent.MOUSE_OUT, mouseOut);
				imageCanvas.addEventListener(MouseEvent.MOUSE_MOVE, sendCursorUpdate);
			}
			
			public function sendCursorUpdate(e:MouseEvent):void{
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);
				command.xPercent = myLoader.mouseX / myLoader.content.width;
				command.yPercent = myLoader.mouseY / myLoader.content.height;
				dispatchEvent(command);
			}
			
			private function updateCursorCallback(e:CursorEvent):void{
				if (myLoader.content == null) return;
				
				if (e.xPercent < 1 && e.yPercent < 1) cursor.visible = true;
				else cursor.visible = false;
				
				cursor.x = myLoader.x + (e.xPercent * myLoader.content.width);
				cursor.y = myLoader.y + (e.yPercent * myLoader.content.height);
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas id="imageCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">  
		<mx:SWFLoader id="myLoader" width="100%" height="100%"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true"
    		completeEffect="Fade"/>    	
	</mx:Canvas>  
		      		 
</mx:VBox>
