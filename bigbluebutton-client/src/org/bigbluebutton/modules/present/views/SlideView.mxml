<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:local="*"
    width="100%" height="100%" 
    paddingBottom="5" 
    creationComplete="onCreationComplete()" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    rollOut="hideCursor()"
    xmlns:views="org.bigbluebutton.modules.present.views.*"
    implements="org.bigbluebutton.common.IBbbCanvas">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="handleWindowResizeEvent"/>
    <mate:Listener type="{PresenterCommands.RESIZE}" method="handleSlideResizeEvent"/>
    
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.Event;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;

			private var zoomPercentage:int = 100;
			private static const ZOOM_STEP:int = 5;
			public static const THUMBNAILS_CLOSED:String = "ThumbnailsClosed";
			
			/**
			 * Variables that holds the presenter's locations of the
			 * loader so we can move the participant's slides in the
			 * same scale to maintain sync on the presenter's cursor.
			 */ 
			private var presentersLoaderXOffsetFromCanvas:Number = 0;
			private var presentersLoaderYOffsetFromCanvas:Number = 0;
			
			/**
			 * Variables that stores the presenter's ratio between
			 * loader and canvas. We need to size the slide with the
			 * same scale as the presenter so that the cursor syncs
			 * properly.
			 */
			private var presentersLoaderCanvasWidthRatio:Number = 1;
			private var presentersLoaderCanvasHeightRatio:Number = 1;
			
			private var canvasMouseXOnMouseDown:int;
			private	var canvasMouseYOnMouseDown:int;
			private var loaderXOnMouseDown:int;
			private var loaderYOnMouseDown:int;
						
			private var cursor:Shape;
			private var overlayChildrenHolder:Canvas = new Canvas();
			private var overlayCanvas:IBbbCanvas;
			
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
			
			private var dispatcher:Dispatcher = new Dispatcher();
				
			private function onCreationComplete():void{
				swfSlideLoader.width = this.width;
				swfSlideLoader.height = this.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				this.rawChildren.addChild(cursor);
				cursor.visible = false;
				
				overlayChildrenHolder = new Canvas();
				this.addChild(overlayChildrenHolder);
				overlayChildrenHolder.x = 0;
				overlayChildrenHolder.y = 0;
				
				this.setChildIndex(thumbnailView, this.numChildren - 1);
			}
			
			public function setSlides(slides:ArrayCollection):void{
				this.slides = slides;
				thumbnailView.dataProvider = this.slides.toArray();
			}
			
			private function changeSlide():void{
				dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, thumbnailView.selectedIndex));
				thumbnailView.visible = false;
				showOverlayCanvas(true);
				dispatchEvent(new Event(THUMBNAILS_CLOSED));
			}
			
			private function changeIndex(e:ListEvent):void{
				dispatchEvent(e);
			}
					
			private function onMouseDown(e:MouseEvent):void{						
				canvasMouseXOnMouseDown = this.mouseX;
				canvasMouseYOnMouseDown = this.mouseY;
				loaderXOnMouseDown = swfSlideLoader.x;
				loaderYOnMouseDown = swfSlideLoader.y;
							
				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseMove(e:MouseEvent):void {	
				var deltaCanvasMouseX:Number = this.mouseX - canvasMouseXOnMouseDown;
				var deltaCanvasMouseY:Number = this.mouseY - canvasMouseYOnMouseDown;

				swfSlideLoader.x = loaderXOnMouseDown + deltaCanvasMouseX/2;
				swfSlideLoader.y = loaderYOnMouseDown + deltaCanvasMouseY/2;
				
				fitSlideToLoader();				
				notifyOtherParticipantsOfSlideMoving();
			}
			
			private function notifyOtherParticipantsOfSlideMoving():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = swfSlideLoader.x/swfSlideLoader.width;
				presentEvent.yOffset = swfSlideLoader.y/swfSlideLoader.height;
				presentEvent.slideToCanvasWidthRatio = swfSlideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = swfSlideLoader.height/this.height;
				dispatchEvent(presentEvent);
			}
					
			private function onMouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function onMouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			private function handleWindowResizeEvent(event:WindowResizedEvent):void {						
				this.width = event.width;
				this.height = event.height;
				resizeAndMoveLoaderInRelationToCanvas();		
			}
						
			private function resizeAndMoveLoaderInRelationToCanvas():void {
				swfSlideLoader.width = this.width * presentersLoaderCanvasWidthRatio; 
				swfSlideLoader.height = this.height * presentersLoaderCanvasHeightRatio;
				
				swfSlideLoader.x = swfSlideLoader.width * presentersLoaderXOffsetFromCanvas;
				swfSlideLoader.y = swfSlideLoader.width * presentersLoaderYOffsetFromCanvas;
				
				fitSlideToLoader();
			}
						
			private function fitSlideToLoader():void {
				if (noSlideContentLoaded()) return;
				
				swfSlideLoader.content.x = swfSlideLoader.x;
				swfSlideLoader.content.y = swfSlideLoader.y;
				swfSlideLoader.content.width = swfSlideLoader.width;
				swfSlideLoader.content.height = swfSlideLoader.height;	
				
				zoomCanvas(swfSlideLoader.width, swfSlideLoader.height);
			}
									
			private function fitLoaderToCanvas():void{
				if (noSlideContentLoaded()) return;
				
				swfSlideLoader.width = this.width;
				swfSlideLoader.height = this.height;
				swfSlideLoader.x = this.x;
				swfSlideLoader.y = this.y;
				
				fitSlideToLoader();						
			}

			private function resizeAndMoveLoaderBy(percent:Number):void {	
				// Save the old loader dimensions. We need these to calculate
				// the new position of the loader;
				var oldLoaderHeight:int = swfSlideLoader.height;
				var oldLoaderWidth:int = swfSlideLoader.width;

				swfSlideLoader.width = this.width * percent/100; 
				swfSlideLoader.height = this.height * percent/100;

				swfSlideLoader.x = calculateNewLoaderX(oldLoaderWidth);
				swfSlideLoader.y = calculateNewLoaderY(oldLoaderHeight);
				
				fitSlideToLoader();
			}
			
			private function calculateNewLoaderY(oldLoaderHeight:int):int {				
				var deltaPercentHeight:Number = (swfSlideLoader.height - oldLoaderHeight) /oldLoaderHeight;
								
				var newLoaderY:int = (swfSlideLoader.y/swfSlideLoader.height) * deltaPercentHeight;				
				if (newLoaderY == 0) {
					newLoaderY = swfSlideLoader.y - (deltaPercentHeight * 100);
				} else {
					newLoaderY = swfSlideLoader.y - newLoaderY;
				}
				
				return newLoaderY;
			}
			
			private function calculateNewLoaderX(oldLoaderWidth:int):int {				
				var deltaPercentWidth:Number = (swfSlideLoader.width - oldLoaderWidth) / oldLoaderWidth;
				var newLoaderX:int = (swfSlideLoader.x/swfSlideLoader.width) * deltaPercentWidth;
				if (newLoaderX == 0) {
					newLoaderX = swfSlideLoader.x - (deltaPercentWidth * 100);
				} else {
					newLoaderX = swfSlideLoader.x - newLoaderX;
				}		
				
				return newLoaderX;		
			}
			
			private function handleSlideResizeEvent(event:PresenterCommands):void {
				zoomLoaderBy(event.newSizeInPercent);
			}
			
			private function zoomLoaderBy(percent:Number):void {				
				if (percent < 100) {
					zoomPercentage = 100;
				} else if (percent > 400) {
					zoomPercentage = 400;
				} else {
					zoomPercentage = percent;
				}
				
 				if (zoomPercentage == 100) {
 					fitLoaderToCanvas();
 				} else {
 					resizeAndMoveLoaderBy(zoomPercentage);
 				}
				notifyOthersOfZoomEvent();
			}
			
			private function onMouseWheelZoomEvent(e:MouseEvent):void {
				if (presenterIsZoomingOut(e.delta)) {
					zoomPercentage -= ZOOM_STEP;
				} else {
					zoomPercentage += ZOOM_STEP;
				}
				
				zoomLoaderBy(zoomPercentage);	
				notifyListenersOfSlideResize(zoomPercentage);			
			}
			
			private function notifyListenersOfSlideResize(percent:Number):void {
				var event:SlideResizedEvent = new SlideResizedEvent();
				event.percent = percent;
				dispatcher.dispatchEvent(event);
			}
						
			private function notifyOthersOfZoomEvent():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xOffset = swfSlideLoader.x/swfSlideLoader.width;
				presentEvent.yOffset = swfSlideLoader.y/swfSlideLoader.height;
				presentEvent.slideToCanvasWidthRatio = swfSlideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = swfSlideLoader.height/this.height;
				dispatchEvent(presentEvent);
			}
			
			private function presenterIsZoomingOut(delta:Number):Boolean {
				// If delta is negative, the presenter is zooming-out of the presentation.
				return delta < 0;
			}
			
			private function handleMoveEvent(e:MoveEvent):void{
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);				
				if (!isPresenter) {
					resizeAndMoveLoaderInRelationToCanvas();
				}
				
				moveCanvas(swfSlideLoader.x, swfSlideLoader.y);
			}
									
			private function handleZoomEvent(e:ZoomEvent):void {
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);													
				if (!isPresenter) {
					resizeAndMoveLoaderInRelationToCanvas();
				}
				
				zoomCanvas(swfSlideLoader.width, swfSlideLoader.height);
			}
									
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				swfSlideLoader.source = e.slide;
			}
						
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(false);
				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(true);
				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function participantIsNowPresenter(presenter:Boolean):void {
				this.isPresenter = presenter;
			}
			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (noSlideContentLoaded()) return;				
				notifyOthersOfPresentersCursorPosition(this.mouseX, this.mouseY);
			}
			
			private function notifyOthersOfPresentersCursorPosition(cursorXPosition:int, cursorYPosition:int):void {
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);				
				command.xPercent = cursorXPosition / this.width;
				command.yPercent = cursorYPosition / this.height;				
				dispatchEvent(command);
			}
			
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (noSlideContentLoaded()) return;
				
				cursor.x = e.xPercent * this.width;
				cursor.y = e.yPercent * this.height;
								
				if (isCursorOutsideWindow(e)) {
					hideCursor()
				} else {
					showCursor();
				}	
			}
			
			private function noSlideContentLoaded():Boolean {
				return swfSlideLoader.content == null
			}
			
			private function savePresentersSettings(xOffset:Number, yOffset:Number, widthRatio:Number, heightRatio:Number):void {
				presentersLoaderXOffsetFromCanvas = xOffset;
				presentersLoaderYOffsetFromCanvas = yOffset;
				presentersLoaderCanvasWidthRatio = widthRatio;
				presentersLoaderCanvasHeightRatio = heightRatio;
			}
			
			/******************************************************
			 * Helper functions to determine offsets
			 ******************************************************/
			
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				swfSlideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {		
				var slideRealWidth:int = swfSlideLoader.content.width;
				var slideRealHeight:int = swfSlideLoader.content.height;				
				fitLoaderToCanvas();
				dispatchNewSlideDisplayedEvent(slideRealWidth, slideRealHeight);				
			}
			
			private function dispatchNewSlideDisplayedEvent(slideRealWidth:int, slideRealHeight:int):void {
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);
			}
						
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}			
			
			/** Inherited from IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.addChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.removeChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return this.overlayChildrenHolder.rawChildren.contains(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				overlayCanvas = overlay;
				var c:Canvas = overlay as Canvas;
				this.addChild(c);
				c.x = 0;
            	c.y = 0;
			}
			
			public function moveCanvas(x:int, y:int):void{
				overlayChildrenHolder.x = swfSlideLoader.x * 2;
				overlayChildrenHolder.y = swfSlideLoader.y * 2;
				
				if (overlayCanvas != null) overlayCanvas.moveCanvas(overlayChildrenHolder.x, overlayChildrenHolder.y);
			}
			
			public function zoomCanvas(width:int, height:int):void{
				overlayChildrenHolder.width = width;
				overlayChildrenHolder.height = height;
				moveCanvas(swfSlideLoader.x, swfSlideLoader.y);
				if (overlayCanvas != null) overlayCanvas.zoomCanvas(width, height);
			}
			
			public function showOverlayCanvas(show:Boolean):void{
				overlayCanvas.showCanvas(show);
			}
			
			public function showCanvas(show:Boolean):void{
				
			}
			
		]]>
	</mx:Script>
	
	<mx:SWFLoader id="swfSlideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>   
    		
    <mx:HorizontalList id="thumbnailView" itemRenderer="org.bigbluebutton.modules.present.views.Thumbnail" itemRollOver="changeIndex(event)" 
    	visible="false" width="100%" height="100" y="{this.height - 100}" change="changeSlide()" />
		      		 
</mx:Canvas>
