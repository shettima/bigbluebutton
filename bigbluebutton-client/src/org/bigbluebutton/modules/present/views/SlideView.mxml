<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:panzoom="com.adobe.wheelerstreet.fig.panzoom.*"
	xmlns:local="*"
    width="100%" height="100%" 
    horizontalAlign="center" paddingBottom="5" 
    creationComplete="init()" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    resize="fitSlideToWindow()" rollOut="hideCursor()">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{ZoomEvent.RESTORE}" method="handleRestoreSlideSizeEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <mate:Listener type="{ZoomEvent.RESIZE}" method="handleResizeSlideEvent" />
    
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import mx.controls.Alert;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;

			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			private var startDragX:Number;
			private var startDragY:Number;
			
			private var xPercent:Number;
			private var yPercent:Number;
			
			private var slideRealWidth:int;
			private var slideRealHeight:int;
			
			private var cursor:Shape;
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
				
			private function init():void{
				swfSlideLoader.width = slideCanvas.width;
				swfSlideLoader.height = slideCanvas.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				slideCanvas.rawChildren.addChild(cursor);
				cursor.visible = false;
			}
			
			private function handleMouseWheelZoomEvent(e:MouseEvent):void{
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.zoomPercentage = e.delta/100;
				dispatchEvent(presentEvent);
			}
		
			private function mouseDown(e:MouseEvent):void{		
				startDragX = swfSlideLoader.content.x;
				startDragY = swfSlideLoader.content.y;
				startDragMouseX = slideCanvas.mouseX;
				startDragMouseY = slideCanvas.mouseY;
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseMove(e:MouseEvent):void{	
				var newX:Number = startDragX + (slideCanvas.mouseX - startDragMouseX);
				var newY:Number = startDragY + (slideCanvas.mouseY - startDragMouseY);
				
				var xOffset:Number = newX / slideCanvas.width;
				var yOffset:Number = newY / slideCanvas.height;
			
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = xOffset;
				presentEvent.yOffset = yOffset;
				dispatchEvent(presentEvent);
			}
		
			private function mouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			public function fitSlideToWindow():void{
				if (swfSlideLoader.content == null) return;
				LogUtil.debug("before: onResize[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY()
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY()+ ")]");	
//				if ((swfSlideLoader.width < slideCanvasWidth()) || (swfSlideLoader.height < slideCanvasHeight())) {
					swfSlideLoader.width = swfSlideLoader.content.width = slideCanvasWidth();
					swfSlideLoader.height = swfSlideLoader.content.height = slideCanvasHeight();
//				}
				var dispatcher:Dispatcher = new Dispatcher();
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);				
				LogUtil.debug("after: onResize[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY()
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
				
			}
			
			private function handleZoomEvent(e:ZoomEvent):void{
				LogUtil.debug("before: handleZoomEvent[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY()
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
				swfSlideLoader.content.scaleX += e.zoomPercentage;
				swfSlideLoader.content.scaleY += e.zoomPercentage;
				swfSlideLoader.width = slideWidth();
				swfSlideLoader.height = slideHeight();
				LogUtil.debug("after: handleZoomEvent[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY() 
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
			}
			
			private function handleResizeSlideEvent(e:ZoomEvent):void{
				swfSlideLoader.content.scaleX = e.zoomPercentage;
				swfSlideLoader.content.scaleY = e.zoomPercentage;
				swfSlideLoader.width = slideWidth();
				swfSlideLoader.height = slideHeight();
			}
			
			private function handleMoveEvent(e:MoveEvent):void{
				if (swfSlideLoader.content == null) return;
				LogUtil.debug("before: handleMoveEvent[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY() 
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
				var newX:Number = e.slideXPosition * slideCanvas.width;
				var newY:Number = e.slideYPosition * slideCanvas.height;
				
		
				if (newX <= 0) swfSlideLoader.content.x = newX;
				if (newY <= 0) swfSlideLoader.content.y = newY;
				LogUtil.debug("after: handleMoveEvent[canvas:("+ slideCanvasWidth() + "," + slideCanvasHeight() + "," + canvasX() + "," + canvasY() 
								+ ")content(" + slideWidth() + "," + slideHeight() + "," + slideX() + "," + slideY()
								+ ")loader(" + swfSlideLoader.width + "," + swfSlideLoader.height + "," + loaderX() + "," + loaderY() + ")]");
			}
			
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				swfSlideLoader.source = e.slide;
			}
			
			private function handleRestoreSlideSizeEvent(e:ZoomEvent):void{
				if (swfSlideLoader.content == null) return;
				swfSlideLoader.content.scaleX = 1;
				swfSlideLoader.content.scaleY = 1;
				swfSlideLoader.content.x = 0;
				swfSlideLoader.content.y = 0;
			}
			
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				this.isPresenter = false;
				removeEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheelZoomEvent);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_UP, mouseUp);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, mouseOut);
				slideCanvas.removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				this.isPresenter = true;
				addEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheelZoomEvent);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, mouseOut);
				slideCanvas.addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (swfSlideLoader.content == null) return;
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);
				command.xPercent = swfSlideLoader.mouseX / slideWidth();
				command.yPercent = swfSlideLoader.mouseY / slideHeight();
				dispatchEvent(command);
			}
			
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (swfSlideLoader.content == null) return;
				
				cursor.x = e.xPercent * slideWidth();
				cursor.y = e.yPercent * slideHeight();
				
				if (isCursorOutsideWindow(e)) {
					hideCursor()
				}
				else {
					showCursor();
				}	
			}
			
			private function fitSlideToWidthAndAdjustHeightToMaintainAspectRatio():void {
				
			}
			
			private function fitSlideToHeightAndAdjustWidthToMaintainAspectRatio():void {
				
			}
			
			private function listenForSlideLoadedCompleteEvent():void {
				swfSlideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {				
				slideRealWidth = slideWidth();
				slideRealHeight = slideHeight();
				LogUtil.debug("handleSlideLoadCompleteEvent[" + slideRealWidth + "," + slideRealHeight + "]");
				
				fitSlideToWindow();
			}
			
			/*****************************************
			 * Helper functions
			 *****************************************/
			 
			private function slideX():int {
				return swfSlideLoader.content.x;
			} 
			
			private function slideY():int {
				return swfSlideLoader.content.y;
			}
			
			private function canvasX():int {
				return slideCanvas.x;
			}
			
			private function canvasY():int {
				return slideCanvas.y;
			}
			
			private function loaderX():int {
				return swfSlideLoader.x;
			}
			
			private function loaderY():int {
				return swfSlideLoader.y;
			}
			
			private function slideCanvasWidth():int {
				return slideCanvas.width;
			}
			
			private function slideCanvasHeight():int {
				return slideCanvas.height;
			}
			
			private function slideWidth():int {
				return swfSlideLoader.content.width;
			}
			
			private function slideHeight():int {
				return swfSlideLoader.content.height;
			}
			
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}
			
			/************************************************************
			 * Methods supporting text selection within the slide.
			 ************************************************************/
			public function turnOnTextSelection():void{
				slideClip = swfSlideLoader.content as MovieClip;
				slideText = slideClip.textSnapshot;
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onTextMouseDown);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_UP, onTextMouseUp);
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				slideText.setSelected(0, slideText.charCount, true);
			}
			
			private function onTextMouseDown(e:MouseEvent):void{
				swfSlideLoader.addEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				slideText.setSelectColor(0xFFFF00);
				firstChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
				slideText.setSelected(0, slideText.charCount, false);
			}
			
			private function onTextMouseMove(e:MouseEvent):void{
				if (firstChar != -1){
					slideText.setSelected(0, slideText.charCount, false)
					
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar < lastChar){
						slideText.setSelected(firstChar, lastChar + 1, true);
					} else{
						slideText.setSelected(lastChar, firstChar + 1, true);
					}
				}
			}
			
			private function onTextMouseUp(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				
				if (firstChar >= 0){
					lastChar = slideText.hitTestTextNearPos(slideClip.mouseX, slideClip.mouseY, 0);
					if (firstChar != lastChar){
						if (firstChar < lastChar){
							slideText.setSelected(firstChar, lastChar + 1, true);
						} else{
							slideText.setSelected(lastChar, firstChar + 1, true);
						}
					}
					firstChar = -1;
					lastChar = -1;
				}
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onTextMouseOut);
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
			}
			
			private function onTextMouseOut(e:MouseEvent):void{
				swfSlideLoader.removeEventListener(MouseEvent.MOUSE_MOVE, onTextMouseMove);
				slideText.setSelected(0, slideText.charCount, false);
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas id="slideCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">  
		<mx:SWFLoader id="swfSlideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>    	
	</mx:Canvas>  
		      		 
</mx:VBox>
