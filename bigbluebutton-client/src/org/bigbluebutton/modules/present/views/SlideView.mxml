<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
    width="100%" height="100%" 
    horizontalAlign="center" paddingBottom="5" 
    creationComplete="init()" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
    xmlns:panzoom="com.adobe.wheelerstreet.fig.panzoom.*" xmlns:local="*"
    resize="onResize()" xmlns:mate="http://mate.asfusion.com/">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="zoomCallback" />
    <mate:Listener type="{ZoomEvent.RESTORE}" method="restoreNormalZoom" />
    <mate:Listener type="{MoveEvent.MOVE}" method="moveCallback" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="switchToPresenter" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="switchToViewer" />
    
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;

			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			private var startDragX:Number;
			private var startDragY:Number;
			
			private var xPercent:Number;
			private var yPercent:Number;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
				
			private function init() : void
			{
				addEventListener(MouseEvent.MOUSE_WHEEL, zoom);
				myLoader.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				myLoader.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				myLoader.addEventListener(MouseEvent.MOUSE_OUT, mouseOut);
			}	
				
			private function zoom(e:MouseEvent):void{		
				var wid:Number = myLoader.width + e.delta * 10;
				var hei:Number = myLoader.height + e.delta *10;
				
				//Arbitrarily allow zoom up to 600% bigger than the size of the presentation window
				if (wid > imageCanvas.width * 6 || hei > imageCanvas.height * 6) return;
				
				if (hei >= this.height || hei >= myLoader.height){
					myLoader.width += e.delta * 10;
					myLoader.height += e.delta * 10;
				} 
				
				xPercent = myLoader.width / imageCanvas.width;
				yPercent = myLoader.height / imageCanvas.height;
				
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xPercent = xPercent;
				presentEvent.yPercent = yPercent;
				dispatchEvent(presentEvent);
			}
		
			private function mouseDown(e:MouseEvent):void{		
				startDragX = myLoader.x;
				startDragY = myLoader.y;
				startDragMouseX = imageCanvas.mouseX;
				startDragMouseY = imageCanvas.mouseY;
				addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseMove(e:MouseEvent):void{	
				myLoader.x = startDragX + (imageCanvas.mouseX - startDragMouseX);
				myLoader.y = startDragY + (imageCanvas.mouseY - startDragMouseY);
				
				var xOffset:Number = myLoader.x / imageCanvas.width;
				var yOffset:Number = myLoader.y / imageCanvas.height;
			
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = xOffset;
				presentEvent.yOffset = yOffset;
				dispatchEvent(presentEvent);
			}
		
			private function mouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			private function mouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
			}
			
			public function onResize():void{
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.RESET_ZOOM);
				presentEvent.xPercent = xPercent;
				presentEvent.yPercent = yPercent;
				dispatchEvent(presentEvent);
			}
			
			private function zoomCallback(e:ZoomEvent):void{
				if (isPresenter) return;
				myLoader.width = e.slideWidth * imageCanvas.width;
				myLoader.height = e.slideHeight * imageCanvas.height;
			}
			
			private function moveCallback(e:MoveEvent):void{
				if (isPresenter) return;
				myLoader.x = e.slideXPosition * imageCanvas.width;
				myLoader.y = e.slideYPosition * imageCanvas.height;
			}
			
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				myLoader.source = e.slide;
			}
			
			private function restoreNormalZoom(e:ZoomEvent):void{
				myLoader.width = this.width;
				myLoader.x = 0;
				myLoader.y = 0;
			}
			
			private function switchToViewer(e:MadePresenterEvent):void{
				this.isPresenter = false;
			}
			
			private function switchToPresenter(e:MadePresenterEvent):void{
				this.isPresenter = true;
			}
		]]>
	</mx:Script>
	
	<mx:Canvas id="imageCanvas" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">  
		<mx:SWFLoader id="myLoader"
    		scaleContent="true" maintainAspectRatio="true" showBusyCursor="true"
    		completeEffect="Fade"/>    	
	</mx:Canvas>    	      		 
</mx:VBox>
