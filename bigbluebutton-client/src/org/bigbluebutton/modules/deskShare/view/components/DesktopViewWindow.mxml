<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="400" height="300"
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	title="Desktop Sharing" 
	showCloseButton="false">
	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.Images;
			import flexlib.mdi.events.MDIWindowEvent;
			import mx.events.ResizeEvent;
			import mx.controls.Alert;
			import org.bigbluebutton.modules.deskShare.events.StopViewingEvent;
			import mx.core.UIComponent;
			import mx.events.SliderEvent;
			
			private var images:Images = new Images();
			[Bindable] public var fitToWidthIcon:Class = images.fit_to_width;
			[Bindable] public var fitToActualSizeIcon:Class = images.full_screen;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent;
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			
			private var _xPosition:int = 675;
			private var _yPosition:int = 310;
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			private function onCreationComplete():void{
				videoHolder = new UIComponent();
				videoHolder.addChild(video);
				this.addChild(videoHolder);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				//videoHolder.addEventListener(ResizeEvent.RESIZE, onResize);
				
				this.width = 600;
				fitToWidth();
			}
			
			public function startVideo(connection:NetConnection, stream:String, width:Number, height:Number):void{
				this.videoWidth = width;
				this.videoHeight = height;
				
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(width, height);
				video.width = width;
				video.height = height;
				video.attachNetStream(ns);
				ns.play(stream);	
				this.stream = stream;
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Publish.Start":
					LogUtil.debug("NetStream.Publish.Start for broadcast stream " + stream);
					break;
				case "NetStream.Play.UnpublishNotify":
					this.close();
					break;
				}
			}		
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}	
			
			private var _defaultWidth:int = 400;
			private var _defaultHeight:int = 300; 
			
			public function get defaultWidth():int{
				return _defaultWidth;
			}
			
			public function get defaultHeight():int{
				return _defaultHeight;
			}
			
			public function set defaultHeight(height:int):void{
				this._defaultHeight = height;
			}
			
			public function set defaultWidth(width:int):void{
				this._defaultWidth = width;
			}
			
			public function resetWidthAndHeight():void{
				this.width = _defaultWidth;
				this.height = _defaultHeight;
			}
			
			public function onResize(e:ResizeEvent):void{
				//video.width = videoHolder.width;
				//video.height = videoHolder.height;
			}
			
			private function closeWindow(e:StopViewingEvent):void{
				this.close();
			}
			
			/*private function onZoomChange(e:SliderEvent):void{
				video.width = zoomSlider.value/100 * videoWidth;
				video.height = zoomSlider.value/100 * videoHeight;
				videoHolder.width = zoomSlider.value/100 * videoWidth;
				videoHolder.height = zoomSlider.value/100 * videoHeight;
			}*/
			
			/**
			 * resizes the desktop sharing video to fit to the width of this window
			 */
			private function fitToWidth():void{
				var aspectRatio:Number = video.width/video.height;
				video.width = this.width - 22;
				videoHolder.width = this.width - 22;
				video.height = video.width / aspectRatio;
				videoHolder.height = video.width / aspectRatio;
			}
			
			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void{
				video.width = videoWidth;
				videoHolder.width = videoWidth;
				video.height = videoHeight;
				videoHolder.height = videoHeight;
			}
		]]>
	</mx:Script>
	
	<mate:Listener type="{StopViewingEvent.STOP_VIEWING}" method="closeWindow" />
	
	<mx:ControlBar id="bottomBar">
		<!--<mx:HSlider id="zoomSlider" value="100" minimum="50" maximum="250" change="onZoomChange(event)" labels="{['50%','250%']}" labelOffset="0" />-->
		<mx:Button id="btnFitToWidth" click="fitToWidth()" icon="{fitToWidthIcon}" toolTip="Fit To Width" />
		<mx:Button id="btnActualSize" click="fitToActualSize()" icon="{fitToActualSizeIcon}" toolTip="100% zoom" />
	</mx:ControlBar>
</MDIWindow>
