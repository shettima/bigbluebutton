<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="org.bigbluebutton.modules.deskShare.view.components.*" 
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	showCloseButton="true"	
	layout="absolute" resizable="false" verticalScrollPolicy="off" horizontalScrollPolicy="off" xmlns:mate="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.deskShare.events.WindowCommand;
			import org.bigbluebutton.modules.deskShare.events.ViewCommand;
			import org.bigbluebutton.modules.deskShare.events.StopViewingEvent;
			import org.bigbluebutton.modules.deskShare.events.StartViewingEvent;
			import org.bigbluebutton.modules.deskShare.events.AppletStartedEvent;
			import mx.controls.HSlider;
			import mx.controls.VSlider;
			import mx.events.SliderEvent;
			import mx.events.ResizeEvent;
			import mx.core.UIComponent;
			
			private var _xPosition:int;
			private var _yPosition:int;
			
			public var videoHolder:UIComponent;
			public var videoPlayer:Video;
			public var ns:NetStream;
			public var capturing:Boolean = false;
			
			public var videoWidth:Number = 400;
			public var videoHeight:Number = 300;
			private var zoomSlider:HSlider;
			
			private var startDragX:Number;
			private var startDragY:Number;
			private var startDragMouseX:Number;
			private var startDragMouseY:Number;
			
			private var captureWidth:int;
			private var captureHeight:int;
			
			public var viewing:Boolean = false;
			public var sharing:Boolean = false;
			
			public var _module:DeskShareModule;
			public var connection:NetConnection;
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			public function get xPosition():int{
				return _xPosition;
			}
			
			public function get yPosition():int{
				return _yPosition;
			}
			
			public function set xPosition(x:int):void{
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void{
				_yPosition = y;
			}
			
			private function onCreationComplete():void{
				if (ExternalInterface.call("checkForJava") != 1){
					this.enabled = false;
					this.lblStatus.text = "Java not enabled";
				}
				height = bar.height + dimensionsBox.height + 33;
				width = dimensionsBox.width + 7;
				dimensionsBox.y = bar.height + 5;
			}
			
			public function addZoomSlider():void{
				zoomSlider = new HSlider();
				zoomSlider.minimum = 10;
				zoomSlider.maximum = 100;
				zoomSlider.value = 100;
				zoomSlider.labels = ['10%','100%'];
				zoomSlider.addEventListener(SliderEvent.CHANGE, onZoomChange);
				bar.addChildAt(zoomSlider, bar.numChildren - 1);
			}
			
			public function removeZoomSlider():void{
				bar.removeChild(zoomSlider);
			}
			
			public function addDragSupport():void{
				canvas.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				canvas.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			public function removeDragSupport():void{
				canvas.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				canvas.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			private function onZoomChange(e:SliderEvent):void{
				videoPlayer.width = zoomSlider.value/100 * videoWidth;
				videoPlayer.height = zoomSlider.value/100 * videoHeight;
				videoHolder.width = zoomSlider.value/100 * videoWidth;
				videoHolder.height = zoomSlider.value/100 * videoHeight;
			}
			
			private function onMouseDown(e:MouseEvent):void{
				startDragX = this.mouseX;
				startDragY = this.mouseY;
				canvas.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);	
				canvas.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
			}
			
			private function onMouseMove(e:MouseEvent):void{
				var movedX:Number = this.mouseX - startDragX;
				var movedY:Number = this.mouseY - startDragY;
				
				canvas.verticalScrollPosition -= movedY;
				canvas.horizontalScrollPosition -= movedX;
			}
			
			private function onMouseUp(e:MouseEvent):void{
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				canvas.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
			}
			
			private function onMouseOut(e:MouseEvent):void{
				canvas.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				canvas.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
			}
			
			private function share(share:Boolean):void{
				if (share) startSharing();
				else stopSharing();
			}
			
			private function startSharing():void{
				var captureX:Number = dimensionsBox.box.x * DimensionsBox.SCALE;
				var captureY:Number = dimensionsBox.box.y * DimensionsBox.SCALE;
				captureWidth = Math.round(dimensionsBox.box.width * DimensionsBox.SCALE - 5);
				captureHeight = Math.round(dimensionsBox.box.height * DimensionsBox.SCALE - 5);
				sharing = true;
				var os:String = Capabilities.os;
				var useTunnel:Boolean;
				if (os == "MacOs") {
					useTunnel = true;
				} else {
					useTunnel = _module.tunnel();
				}
				ExternalInterface.call("startApplet", _module.getCaptureServerUri(), _module.getRoom(), 
															captureX, captureY, captureWidth, captureHeight,
															useTunnel.toString());
			}
			
			private function stopSharing():void{
				if (!sharing) return;
			
				sharing = false;
				btnStartApplet.label = "Start Sharing";
				btnStartApplet.selected = false;
				width = dimensionsBox.width + 7;
				height = bar.height + dimensionsBox.height + 33;
				dimensionsBox.stopThumbnail();
					
				ExternalInterface.call("stopApplet");
				dispatchEvent(new ViewCommand(ViewCommand.STOP));	
			}
					
			override public function close(event:MouseEvent = null):void {
				super.close(event);
				LogUtil.debug("DeskShare window closing");
				stopViewing();						
				stopSharing();
				dispatchEvent(new WindowCommand(WindowCommand.CLOSE));
			}
			
			private function stopViewing():void{
				if (! viewing) return;
			
				ns.close();
				viewing = false;
				btnStartApplet.visible = true;
				canvas.visible = false;
				width = 236;
				height = 74;
				lblStatus.text = "";
				ns.close();
				canvas.removeChild(videoHolder);
				videoHeight = 0;
				videoWidth = 0;
				
				width = dimensionsBox.width + 7;
				height = bar.height + dimensionsBox.height + 33;
				dimensionsBox.visible = true;
				dimensionsBox.box.visible = true;
				resizable = false;
				
				removeZoomSlider();
				removeDragSupport();
			}
			
			/**
			 * Method called from the html template once the applet has started 
			 * 
			 */		
			public function onAppletStart(event:AppletStartedEvent):void{
				if (!sharing) return;
				
				LogUtil.debug("DeskShareWindow::onAppletStart");
				capturing = true;
				height = bar.height + dimensionsBox.height + 33;
				width = dimensionsBox.width + 7;
				btnStartApplet.label = "Stop Sharing";
				dimensionsBox.x = 0;
				dimensionsBox.y = bar.height + 5;
				dimensionsBox.startThumbnail(connection, _module.getRoom());
				
				//Send a notification to all room participants to start viewing the stream
				var e:ViewCommand = new ViewCommand(ViewCommand.START);
				e.captureHeight = captureHeight;
				e.captureWidth = captureWidth;
				dispatchEvent(e);
			}
			
			public function startViewing(e:StartViewingEvent):void{
				if (sharing) return;
				
				LogUtil.debug("DeskShareWindow::startViewing");
				videoHeight = e.height;
				videoWidth = e.width;
				
				showCloseButton = false;
				dispatchEvent(new WindowCommand(WindowCommand.OPEN));
				
				videoPlayer = new Video(videoWidth, videoHeight);
				videoPlayer.width = videoWidth;
				videoPlayer.height = videoHeight;
				videoHolder = new UIComponent();
				videoHolder.width = videoWidth;
				videoHolder.height = videoHeight;
				videoHolder.setActualSize(videoWidth, videoHeight);
				videoHolder.addChild(videoPlayer);
				canvas.addChildAt(videoHolder,0);
				videoHolder.x = 0;
				videoHolder.y = 20;
				
				dimensionsBox.visible = false;
				height = 600;
				width = 500;
				canvas.visible = true;
				ns = new NetStream(connection);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				videoPlayer.attachNetStream(ns);
				
				var room:String = _module.getRoom();
				ns.play(room);
				resizable = true;
				
				viewing = true;
				btnStartApplet.visible = false;
				addZoomSlider();
				addDragSupport();		
		}
		
		private function onAsyncError(e:AsyncErrorEvent):void{
			LogUtil.error("DeskShare::error when playing stream!");
		}
		
		private function closeWindow(e:StopViewingEvent):void {
			stopViewing();						
			stopSharing();
			close();
		}
			
		]]>
	</mx:Script>
	<mx:Canvas id="canvas" x="0" y="50" visible="false" width="100%" height="100%"/>
	<mx:ApplicationControlBar id="bar" width="100%">
		<mx:RadioButton id="btnStartApplet" label="Start Sharing" click="share(btnStartApplet.enabled)" x="10" y="10"/>
		<mx:Label id="lblStatus" />
	</mx:ApplicationControlBar>
	<components:DimensionsBox id="dimensionsBox"/>
	
	<mate:Listener type="{AppletStartedEvent.APPLET_STARTED}" method="onAppletStart" />
	<mate:Listener type="{MadePresenterEvent.MADE_PRESENTER}" method="closeWindow" />
	<mate:Listener type="{StopViewingEvent.STOP_VIEWING}" method="closeWindow" />
	
</MDIWindow>
