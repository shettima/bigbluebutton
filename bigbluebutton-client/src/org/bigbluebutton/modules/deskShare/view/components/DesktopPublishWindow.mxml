<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.

  Authors: Denis Zgonjanin <me.snap@gmail.com>
           Richard Alam <ritzalam@gmail.com> 
  
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	backgroundImage="{bbbLogo}"	
	title="Desktop Sharing"
	resizable="false">
		
	<mate:Listener type="{AppletStartedEvent.APPLET_STARTED}" method="onAppletStart" />
	<mate:Listener type="{MadePresenterEvent.BECOME_PRESENTER}" method="onChangedPresenter" />
		
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.modules.deskShare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.deskShare.events.StreamEvent;
			import flexlib.mdi.events.MDIWindowEvent;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import mx.core.UIComponent;
			import org.bigbluebutton.modules.deskShare.events.AppletStartedEvent;
			
			public static const SCALE:Number = 5;
			
			private var images:Images = new Images();
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			
			private var _xPosition:int = 675;
			private var _yPosition:int = 310;
			
			private var connection:NetConnection;
			private var uri:String;
			private var room:String;
			private var sharing:Boolean = false;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent;
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			private var captureHeight:Number = Capabilities.screenResolutionY;
			private var captureWidth:Number = Capabilities.screenResolutionX;
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			
			private function onCreationComplete():void {
				windowControls.maximizeRestoreBtn.enabled = false;
				windowControls.maximizeRestoreBtn.toolTip = "You cannot maximize this window.";
				windowControls.closeBtn.toolTip = "Stop sharing and close this window.";
				windowControls.minimizeBtn.toolTip = "Minimize this window.";
			}
	
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			public function get defaultWidth():int{
				return this.width;
			}
			
			public function get defaultHeight():int{
				return this.height;
			}
			
			public function set defaultHeight(height:int):void{
				this.height = height;
			}
			
			public function set defaultWidth(width:int):void{
				this.width = width;
			}

			/*
			 * Implement resizeable interface.
			 */			
			public function resetWidthAndHeight():void{/* do nothing */}
			
			public function initWindow(connection:NetConnection, uri:String, room:String):void {
				this.connection = connection;
				this.uri = uri;
				this.room = room;
				startSharing(connection, uri, room);				
			}
			
			private function startSharing(connection:NetConnection, uri:String, room:String):void {
				var captureX:Number = 0;
				var captureY:Number = 0;
				
				sharing = true;
				
				ExternalInterface.call("startApplet", uri, room, 
										captureX, captureY, 
										captureWidth, captureHeight);
			}
			
			public function stopSharing():void{
				sharing = false;
				stopStream();
				var streamEvent:StreamEvent = new StreamEvent(StreamEvent.STOP);
				dispatchEvent(streamEvent);
					
				ExternalInterface.call("stopApplet");
				closeWindow();
			}
			
			private function onAppletStart(event:AppletStartedEvent):void{
				LogUtil.debug("DeskShareWindow::onAppletStart");
				startStream(connection, room);
				
				var streamEvent:StreamEvent = new StreamEvent(StreamEvent.START);
				streamEvent.videoWidth = captureWidth;
				streamEvent.videoHeight = captureHeight;
				dispatchEvent(streamEvent);
			}
			
			private function startStream(nc:NetConnection, streamName:String):void{
				LogUtil.debug("DimensionsBox - Starting thumbnail view");
				LogUtil.debug("connection:" + nc.uri + " stream:" + streamName);
				
				videoHolder = new UIComponent();
				video = new Video(captureWidth/SCALE, captureHeight/SCALE);
				video.width = captureWidth/SCALE;
				video.height = captureHeight/SCALE;
				videoHolder.width = captureWidth/SCALE;
				videoHolder.height = captureHeight/SCALE;
				videoHolder.addChild(video);
				this.addChild(videoHolder);
				this.width = video.width + 6;
				this.height = video.height + 29;
				
				ns = new NetStream(nc);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				video.attachNetStream(ns);
				ns.play(streamName);
			}
			
			private function stopStream():void{
				ns.close();
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Publish.Start":
					LogUtil.debug("NetStream.Publish.Start for broadcast stream " + stream);
					break;
				case "NetStream.Play.UnpublishNotify":
					LogUtil.debug("NetStream.Play.UnpublishNotify for broadcast stream " + stream);
					stopSharing();
					break;
				}
			}
			
			private function onChangedPresenter(e:Event):void{
				stopSharing();
				closeWindow();
			}

			private function closeWindow():void {				
				dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));				
			}		
				
			/*
			 * Override the close handler. We want the Event Map to send a message to
			 * the MDIManager to close this window;
			 */
			override public function close(event:MouseEvent = null):void {
				stopSharing();
				closeWindow();
			}		
		]]>
	</mx:Script>

</MDIWindow>
