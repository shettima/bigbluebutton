<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 


<pres:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:thumb="org.bigbluebutton.modules.presentation.view.components.*"
	xmlns:pres="flexlib.mdi.containers.*"
	paddingBottom="0" paddingTop="0" 
	paddingLeft="0" paddingRight="0" 
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	mouseMove="thumbnailDisplay()"
	creationComplete="init()"
	rollOut="hideThumbs()" xmlns:mate="http://mate.asfusion.com/">

	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			import org.bigbluebutton.main.events.AddHighligtherCanvasEvent;
			import org.bigbluebutton.modules.presentation.view.SlideViewMediator;
		
			import org.bigbluebutton.modules.presentation.view.PresentationWindowMediator;
			import mx.core.Application;
			import org.bigbluebutton.modules.presentation.view.components.Images;
			import org.bigbluebutton.modules.presentation.PresentationFacade;
			import mx.binding.utils.BindingUtils;

			import mx.collections.ArrayCollection;
			import mx.rpc.events.*;
			import mx.controls.Alert;
            import mx.managers.PopUpManager;
            import mx.containers.TitleWindow;
            import flash.geom.Point;
             			
            public static const TITLE:String = "Presentation";
			private var images:Images = new Images();

			[Bindable] private var uploadIcon : Class = images.pdf;
			[Bindable] private var forwardIcon : Class = images.forward;
			[Bindable] private var backwardIcon : Class = images.backward;
			[Bindable] private var thumbnailIcon : Class = images.thumbnails;
			[Bindable] private var magnifierIcon : Class = images.magnifier;
						
			[Bindable] private var thumbY:Number;
								
			public var uploadWindow:FileUploadWindow = null;
			
			private var _xPosition:int;
			private var _yPosition:int;
			
			private var mouseDown:Boolean = false;
			public var isPresenter:Boolean = false;
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			private function init():void{
				positionThumbnails();
				thumbnailWindow.addEventListener(FisheyeThumbnail.SLIDE_HIGHLIGHTED, onSlideHighlighted);
				thumbY = this.height - 160;
				slideView.addEventListener(SlideViewMediator.ZOOM, scrollZoom);
			}
			
			private function positionThumbnails():void{
				this.thumbnailWindow.y = this.mainCanvas.height*0.9;
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}	
			
			private function thumbnailDisplay():void{
				if (!mouseDown && mouseY > this.height*0.8 && isPresenter){
					thumbnailWindow.y = this.height - 270;
					thumbnailWindow.visible = true;
				} else if (slideView.slides != null){
					slideNumLbl.text = "" + (slideView.selectedSlide + 1) + " of " + slideView.slides.length;
				}
			}
			
			private function onSlideHighlighted(e:Event):void{
				if (slideView.visible)
				slideNumLbl.text = "" + (thumbnailWindow.slideNumber+1) + " of " + slideView.slides.length;
			}
			
			/**
			 * Hide the thumbnails in case the user moves the mouse outside this window
			 */
			private function hideThumbs():void{
				if (slideView.slides != null)
					slideNumLbl.text = "" + (slideView.selectedSlide + 1) + " of " + slideView.slides.length;
				
				thumbnailWindow.visible = false;
			}
			
			private function showThumbs():void {
				 if (isPresenter){
					//readjust the position of the thumbnails in case the window was resized
					//Note: this is necessary because the MDIWindow does not let you listen to the resize() event!
					thumbY = this.height - 150;
					thumbnailWindow.visible = true;
				}				
			}
			
			private function sliderZoom():void{
				slideView.myLoader.width = slideView.imageCanvas.width * (zoomSlider.value/100);
				slideView.myLoader.height = slideView.imageCanvas.height * (zoomSlider.value/100);
			}
			
			private function scrollZoom(e:Event):void{
				zoomSlider.value = (slideView.myLoader.width / slideView.imageCanvas.width) * 100;
			}
			
			private function onCanvasClick():void{
				thumbnailWindow.visible = false;
			}
			
			private function addHighlighter(event:AddHighligtherCanvasEvent):void{
				var highlighter:Canvas = event.canvas;
				this.addChild(highlighter);
				highlighter.width = mainCanvas.width;
				highlighter.height = mainCanvas.height;
			}

		]]>
	</mx:Script>
	
	<mx:Fade id="thumbFadeIn" alphaFrom="1" alphaTo="0" duration="100" />
	<mx:Fade id="thumbFadeOut" alphaFrom="0" alphaTo="1" duration="100" />
	
	<mx:Canvas id="mainCanvas" width="100%" height="100%" resize="positionThumbnails()" mouseDown="mouseDown = true" 
		mouseUp="mouseDown = false" verticalScrollPolicy="off" horizontalScrollPolicy="off" click="onCanvasClick()">
		<thumb:SlideView id="slideView" width="100%" height="100%" visible="false"/>
		<thumb:FisheyeThumbnail y="{thumbY}" id="thumbnailWindow" width="100%" height="100%" visible="false" backgroundAlpha="1" 
			verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalCenter="top"/>
	</mx:Canvas>
			
    
    <mx:ApplicationControlBar id="presCtrlBar" width="100%" >
    	  <mx:Button id="uploadPres" icon="{uploadIcon}" visible="false" width="20" height="20"
    	   		toolTip="Upload PDF document for presentation." click="dispatchEvent(new Event(PresentationWindowMediator.OPEN_UPLOAD))"/>    
    	  <mx:Label id="presenterNameLabel" visible="false" text=""/>
    	  <mx:Spacer width="10%" id="spacer1"/>
    	  <mx:Button id="backButton" icon="{backwardIcon}" visible="false" width="40" height="20"
    	   		toolTip="Previous slide." click="dispatchEvent(new Event(PresentationWindowMediator.PREVIOUS_SLIDE))"/>
    	  <mx:Label id="slideNumLbl" text=""/>    
    	  <mx:Button id="forwardButton" icon="{forwardIcon}" visible="false" width="40" height="20"
    	   		toolTip="Next slide" click="dispatchEvent(new Event(PresentationWindowMediator.NEXT_SLIDE))"/>    				
    	<mx:Spacer width="10%" id="spacer2"/>
    	<mx:HSlider id="zoomSlider" visible="false"
    		minimum="100" maximum="300" value="100" 
    		dataTipPlacement="right" labels="['100%','300%']"
    		allowTrackClick="true" liveDragging="true" change="sliderZoom()" width="100" />
    	<mx:Button id="btnResetZoom" icon="{magnifierIcon}" visible="false" width="20" height="20" 
    		toolTip="Reset Zoom" click="dispatchEvent(new Event(PresentationWindowMediator.RESET_ZOOM))"/>
    </mx:ApplicationControlBar>			
    
    <mate:Debugger level="{Debugger.ALL}" />
    <mate:Listener type="{AddHighligtherCanvasEvent.ADD_HIGHLIGHTER_CANVAS}" method="addHighlighter" />
</pres:MDIWindow>