<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
    title="Upload Presentation"
    x="168" y="86" layout="absolute" width="500" height="200"
    	initialize="initData();">
    <mate:Listener type="{ThumbnailsProgressEvent.THUMBNAILS_PROGRESS_EVENT}" method="handleThumbnailsProgressEvent" />
    <mate:Listener type="{ConvertSuccessEvent.CONVERT_SUCCESS_EVENT}" method="handleConvertSuccessEvent" />
    	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.presentation.events.ConvertSuccessEvent;
			import org.bigbluebutton.modules.presentation.events.ThumbnailsProgressEvent;
			import org.bigbluebutton.modules.presentation.view.FileUploadWindowMediator;
			import mx.collections.*
			import org.bigbluebutton.modules.presentation.view.event.*;
            import mx.events.ValidationResultEvent;
            import mx.validators.*;
            import mx.events.FlexEvent;
            	
			public var presentationNames:Array;
			
			private var images:Images = new Images();
			[Bindable] private var addIcon : Class = images.add;
			[Bindable] private var bulletGoIcon : Class = images.bulletGo;
			[Bindable] private var deleteIcon : Class = images.delete_icon;
	        
	        private var thumbnailTimer:Timer = new Timer(5000);
	        private var genThumbText:String = "Generating thumbnails..";
	        private var genThumbDots:String = ".";
	        
	        [Bindable]
    	    public var presentationNamesAC:ArrayCollection;

	        private function initData():void {
    	        presentationNamesAC = new ArrayCollection(presentationNames);
    	        if(presentationNames.length<=0) {
					deleteBtn.enabled = false;
					showBtn.enabled = false;
    	        }
            }			
            
	        private function showPresentation():void {
				LogUtil.debug("FileUploadWindow::showPresentation() " + this.presentationNamesCombobox.selectedLabel);
				dispatchEvent(new ShowPresentationEvent(this.presentationNamesCombobox.selectedLabel));       
			}			
            
	        private function deletePresentation():void {
				LogUtil.debug("FileUploadWindow.mxml::deletePresentation() " + this.presentationNamesCombobox.selectedIndex);
				presentationNamesAC.removeItemAt(presentationNamesCombobox.selectedIndex);
			}			

	        private function terminatePresentation():void {
				LogUtil.debug("FileUploadWindow::cancelPresentation()");
				dispatchEvent(new Event(FileUploadWindowMediator.TERMINATE_UPLOAD_WINDOW));       
			}			
			
			private function handleThumbnailsProgressEvent(event:Event):void {	
				genThumbDots = ".";

            	thumbnailTimer.repeatCount = 20;
            	thumbnailTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            	thumbnailTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);
            
            	thumbnailTimer.start();
				
			}
			
			private function handleConvertSuccessEvent(event:Event):void {
				thumbnailTimer.stop();
			}
			
			private function timerHandler(e:TimerEvent):void{
            	displayGeneratingThumbnailsMessage();
        	}

        	private function completeHandler(e:TimerEvent):void {
            	 displayGeneratingThumbnailsMessage();
            	 thumbnailTimer.stop();
        	}
        	
        	private function displayGeneratingThumbnailsMessage():void {
        		genThumbDots += ".";
        		progressLbl.text = genThumbText + genThumbDots;
				progressBar.label = genThumbText + genThumbDots;
        	}

		]]>
		
	</mx:Script>
           
	<mx:Spacer height="100%" x="0" y="0"/>	
	<mx:Label id="fileLbl" text="File:" x="50" y="50"/>
	<mx:TextInput id="fileTxtInput" width="228" x="87" y="48"/>
	<mx:Button id="selectBtn" toolTip="Browse file" click="dispatchEvent(new Event(FileUploadWindowMediator.SELECT_FILE))" icon="{addIcon}" width="26" x="332" y="48"/>
	<mx:Button id="uploadBtn" label="Upload" toolTip="Upload file"  click="dispatchEvent(new Event(FileUploadWindowMediator.START_UPLOAD))"
		enabled="false" icon="{bulletGoIcon}" x="366" y="48"/>

	<mx:Label id="progBarLbl" text="Progress:" x="21" y="75" visible="false"/>
	<mx:ProgressBar id="progressBar" mode="manual" label="" labelPlacement="center" width="360" y="75" x="87" visible="false"/>
	
	<mx:Label id="presentationNamesLb" text="Uploaded Presentations:" x="50" y="90"/>
    <mx:ComboBox id="presentationNamesCombobox" width="125" x="190" y="90" dataProvider="{presentationNamesAC}"/> 
	<mx:Button id="deleteBtn" label="" toolTip="Delete Presentation"  
		click="deletePresentation()" enabled="true"	icon="{deleteIcon}" width="26" x="332" y="90"/>
	<mx:Button id="showBtn" label="Show" toolTip="Show Presentation"  
		click="showPresentation()" enabled="true" icon="{bulletGoIcon}" x="366" y="90"/>
	
	<mx:ControlBar horizontalAlign="center" verticalAlign="middle" x="0" y="106">
		<mx:Label id="progressLbl" text="" width="100%"/>
		<mx:Spacer width="100%"/>
		<mx:Button id="okCancelBtn" label="Cancel" click="terminatePresentation()"/>
	</mx:ControlBar>	
</mx:TitleWindow> 