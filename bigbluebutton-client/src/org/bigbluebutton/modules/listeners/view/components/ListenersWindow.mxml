<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
			xmlns="flexlib.mdi.containers.*"
			implements="org.bigbluebutton.common.IBbbModuleWindow"
			width="215" height="226"
			title="{windowTitle}"
			creationComplete="addAutomationCallback()">

	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			import org.bigbluebutton.modules.listeners.view.events.ListenerSelectedEvent;
			import mx.events.ListEvent;
			import org.bigbluebutton.modules.listeners.ListenersModuleConstants;
			import org.bigbluebutton.modules.listeners.view.components.Images;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import flash.events.MouseEvent;
			import mx.controls.Label;
			import mx.collections.ArrayCollection;
			import mx.controls.Image;	
			import mx.binding.utils.BindingUtils;
			
			
			private var images:Images = new Images();
			
			private var _xPosition:int;
			private var _yPosition:int;
 			  			
			[Bindable] private var muteAllIcon:Class = images.sound_mute; 
			[Bindable] private var unmuteAllIcon:Class = images.sound_none;
			[Bindable] private var ejectIcon:Class = images.eject_user;

			[Bindable] public var listeners:ArrayCollection;
			[Bindable] public var moderator:Boolean;
			[Bindable] private var windowTitle:String = ResourceUtil.getInstance().getString('bbb.listeners.title', [0]) ;
			
			
			private function onCreationComplete():void {
				BindingUtils.bindSetter(updateNumberOfListeners, listeners, "length");				
			}
			
			private function updateNumberOfListeners(numListeners:int):void {
				windowTitle = ResourceUtil.getInstance().getString('bbb.listeners.title', [numListeners]) ;
			}
			
			//Adds a callback so that we can call the function externally for testing purposes
			private function addAutomationCallback():void{
				onCreationComplete();
				ExternalInterface.addCallback("testVoiceJoined", testVoiceJoined);
			}
			
			//The callback for "testVoiceJoined". Accepts a user name and returns whether the user is in the voice conference.
			private function testVoiceJoined(user:String):String{
				for (var i:int=0; i<listeners.length ;i++){
					if (listeners.getItemAt(i).userid == user) return "true";
				}
				return "false";
			}
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}		
			
			private var _defaultWidth:int = 215;
			private var _defaultHeight:int = 226;
			
			public function get defaultWidth():int{
				return _defaultWidth;
			}
			
			public function get defaultHeight():int{
				return _defaultHeight;
			}
			
			public function set defaultHeight(height:int):void{
				this._defaultHeight = height;
			}
			
			public function set defaultWidth(width:int):void{
				this._defaultWidth = width;
			}
			
			public function resetWidthAndHeight():void{
				this.width = _defaultWidth;
				this.height = _defaultHeight;
			}
 
 			private function listenerSelectEvent(event:ListEvent):void {
	            dispatchEvent(new ListenerSelectedEvent(moderator , listeners.getItemAt(listenersList.selectedIndex).userid)); 
        	}   		
        	
        	private function handleEjectButtonClick():void {
        		if ((listeners != null) && (listeners.length > 0)) {
        			dispatchEvent(new Event(ListenersModuleConstants.EJECT_LISTENER_EVENT));
        			ejectBtn.enabled = false;
        		}
        	}	   
		]]>
	</mx:Script>
    	<mx:TileList id="listenersList" height="100%" width="100%" itemClick="listenerSelectEvent(event);"
 			itemRenderer="org.bigbluebutton.modules.listeners.view.components.ListenerItem" 
            maxColumns="1" rowHeight="25"  dragEnabled="false" dataProvider="{listeners}">          
    	</mx:TileList>				
    	    	
    	<mx:ControlBar width="100%">
    	   <mx:Button id="muteAllBtn" icon="{muteAllIcon}" 
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.muteAllBtn.toolTip')}" 
    	   			click="dispatchEvent(new Event(ListenersModuleConstants.MUTE_ALL))"
    	   			visible="{moderator}" width="18" height="18"/> 
    	   <mx:Button id="unmuteAllBtn" icon="{unmuteAllIcon}" 
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.unmuteAllBtn.toolTip')}" 
    	   			click="dispatchEvent(new Event(ListenersModuleConstants.UNMUTE_ALL))"
    	   			visible="{moderator}" width="18" height="18"/>      	   
     	   <mx:Spacer width="100%"/>		
			<mx:Button id="ejectBtn" icon="{ejectIcon}" 
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.ejectBtn.toolTip')}" 
    	   			click="handleEjectButtonClick()"
    	   			visible="{moderator}" enabled="false" width="18" height="18"/> 
    	</mx:ControlBar>

</MDIWindow>
