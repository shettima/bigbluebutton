<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	width="100%" height="100%">

	<mate:Listener type="{PrivateChatMessageEvent.PRIVATE_CHAT_MESSAGE_EVENT}" method="handlePrivateChatMessageEvent"/>
	<mate:Listener type="{PublicChatMessageEvent.PUBLIC_CHAT_MESSAGE_EVENT}" method="handlePublicChatMessageEvent"/>
	<mate:Listener type="{ParticipantJoinEvent.PARTICIPANT_JOINED_EVENT}" method="handleParticipantJoinedEvent"/>
	
	<mx:Script>
		<![CDATA[
			import flexlib.controls.tabBarClasses.SuperTab;
			import flexlib.events.SuperTabEvent;
			import org.bigbluebutton.modules.chat.events.QueryParticipantsEvent;
			import org.bigbluebutton.main.events.ParticipantJoinEvent;
			import org.bigbluebutton.modules.chat.events.SendPrivateChatMessageEvent;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.modules.chat.events.SendPublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.events.PublicChatMessageEvent;
			import org.bigbluebutton.modules.chat.model.MessageVO;
			import org.bigbluebutton.modules.chat.events.PrivateChatMessageEvent;
			import mx.core.Container;
			import org.bigbluebutton.modules.chat.model.business.UserVO;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
									
			private static const PUBLIC_CHAT_USERID:String = '0';
			private static const PUBLIC_CHAT_USERNAME:String = 'All';
			
			public var localDispatcher:IEventDispatcher;
			
			[Bindable]
			private var participants:ArrayCollection = new ArrayCollection();
						
			private function onCreationComplete():void{
				addParticipantToList(PUBLIC_CHAT_USERID, PUBLIC_CHAT_USERNAME);
				openChatBoxFor(PUBLIC_CHAT_USERID);
				callLater(makePublicChatUncloseable);
				addEventListener(SuperTabEvent.TAB_CLOSE, onUserClosedTab);
			}
			
			private function makePublicChatUncloseable():void {
                chatTabs.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
            }
                        
			public function setFocusOn(component:UIComponent):void
			{
				if (component.id == "txtMsg") {
				component.setFocus();
                component.drawFocus(true);
    			}
    			else
    			{
    				this.txtMsg.setFocus();
    				this.txtMsg.drawFocus(true);
    			}
			}
			
			public function setFocusOff():void
			{
				this.txtMsg.drawFocus(false);
			}
			
			private function currentTime() : String
			{
				var date:Date = new Date();
				var t:String = date.toLocaleTimeString();
				return t;
			}
		
		    private function sendMessages():void
		    {
		    	trace("Sending message");
		    	if (hasMessageToSend()){				
					if (isChatBoxCurrentlySelected(PUBLIC_CHAT_USERID)) {						
						sendPublicChatMessage();
					} else{						
						sendPrivateChatMessage();
					}
					clearMessageEntryTextBox();
			   	}
			}			
			
			private function hasMessageToSend():Boolean {
				return txtMsg.text != "";
			}
			
			private function clearMessageEntryTextBox():void {
				txtMsg.text = "";
			}
			
			private function parseURLs(message:String):String{
				var indexOfHTTP:Number = message.indexOf("http://");
				var indexOfWWW:Number = message.indexOf("www.");
				if (indexOfHTTP == -1 && indexOfWWW == -1) return message;
				
				var words:Array = message.split(" ");
				var parsedString:String = "";
				
				for (var n:Number = 0; n<words.length; n++){
					var word:String = words[n] as String;
					if (word.indexOf("http://") != -1) parsedString += '<a href="event:' + word + '"> <u>' + word + '</u></a> ';
					else if (word.indexOf("www.") != -1) parsedString += '<a href="event:http://' + word + '"> <u>' + word + '</u></a> ';
					else parsedString += word + ' ';
				}
				return parsedString;
			}
		
			private function sendPublicChatMessage():void {
				trace("Sending public chat message");
				var publicEvent:SendPublicChatMessageEvent = new SendPublicChatMessageEvent(SendPublicChatMessageEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT);
				publicEvent.message = parseURLs(txtMsg.text);
				publicEvent.color = cmpColorPicker.selectedColor.toString(16);
				publicEvent.time = currentTime();
				localDispatcher.dispatchEvent(publicEvent);
			}
			
			private function queryForParticipants():void {
				trace("Sending query for participants message");
				var event:QueryParticipantsEvent = new QueryParticipantsEvent(QueryParticipantsEvent.QUERY_PARTICIPANTS_EVENT);
				localDispatcher.dispatchEvent(event);
			}
			
			private function sendPrivateChatMessage():void {
				trace("Sending private chat message");
				var privateEvent:SendPrivateChatMessageEvent = new SendPrivateChatMessageEvent(SendPrivateChatMessageEvent.SEND_PRIVATE_CHAT_MESSAGE_EVENT);
				privateEvent.message = parseURLs(txtMsg.text);
				privateEvent.toUser = chatTabs.selectedChild.name;
				privateEvent.color = cmpColorPicker.selectedColor.toString(16);
				privateEvent.time = currentTime();
				localDispatcher.dispatchEvent(privateEvent);
			}
			
			private function handleParticipantJoinedEvent(event:ParticipantJoinEvent):void {
				if (event.join) {
					trace("New participant " + event.participant.name + "[" + event.participant.userid + "]");	
					addParticipantToList(event.participant.userid, event.participant.name);									
				} else {
					trace("removing participant " + event.participant.name + "[" + event.participant.userid + "]");
					removeParticipantFromList(event.participant.userid);
				}
			}
					
			private function isChatBoxCurrentlySelected(id:String):Boolean {
				if (chatTabs.getChildByName(id) == chatTabs.selectedChild){
					return true;
				}
				return false;
			}
			
			private function addParticipantToList(userid:String, name:String):void {
				var item:Object = new Object();
				item.label = name;
				item.userid = userid;
				participants.addItem(item);
			}
			
			private function removeParticipantFromList(userid:String):void {
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == userid) {
						participants.removeItemAt(i);
						updateChatBoxThatParticipantHasLeft(userid);
					}
				}
			}
			
			private function updateChatBoxThatParticipantHasLeft(userid:String):void {
				if (participantHasChatBox(userid)) {
					var chatBox:ChatBox = getChatBoxForParticipant(userid);
					trace("Setting participantLoggedOut to true");
					chatBox.participantLoggedOut = true;
					
					if (isChatBoxCurrentlySelected(userid)) {
						disableMessageEntryTextBox();
					}
				}
			}
			
			private function notifyParticipantOfUnreadMessageFrom(userid:String):void {
				var chatBox:ChatBox = getChatBoxForParticipant(userid);
				var tabIndex:int = getTabIndexFor(chatBox);
				var tab:Button = chatTabs.getTabAt(tabIndex);
				tab.setStyle("fillColors", new Array(0xFFAE00, 0xD3800A));
				tab.setStyle("fillAlphas", new Array(1.0, 0.8));
			}
			
			private function getTabIndexFor(chatBox:ChatBox):int {
				return chatTabs.getChildIndex(chatBox);
			}
			
			private function onTabNavChange():void{
				var tab:Button = chatTabs.getTabAt(chatTabs.selectedIndex);
				tab.setStyle("fillColors", new Array(0xFFFFFF, 0xCCCCCC));

				var chatBox:ChatBox = chatTabs.getChildAt(chatTabs.selectedIndex) as ChatBox;
				if (chatBox.participantLoggedOut) {
					trace("Disabling message box");
					disableMessageEntryTextBox();
				} else {
					trace("Enabling message box");
					enableMessageEntryTextBox();
				}				
			}
						
			private function getParticipantName(userid:String):String{
				for (var i:Number = 0; i<participants.length; i++){
					if (participants.getItemAt(i).userid == userid) return participants.getItemAt(i).label;
				}
				return "unknown user";
			}
			
			private function onOpenChatBox():void{				
				var userid:String = participantList.selectedItem.userid;
				openChatBoxFor(userid);
			}
			
			private function openChatBoxFor(userid:String):void {
				trace("Opening chat box " + userid);
				var chatBox:ChatBox;
				
				if (participantHasChatBox(userid)) {
					chatBox = getChatBoxForParticipant(userid);
				} else {
					chatBox = createChatBoxFor(userid);
				}
								 
				chatTabs.selectedChild = chatBox;				
			}
			
			private function createChatBoxFor(userid:String):ChatBox {				
				var chatBox:ChatBox = new ChatBox();
				chatBox.id = getParticipantName(userid);
				chatBox.label = getParticipantName(userid);
				chatBox.name = userid;
				chatTabs.addChild(chatBox);
				return chatBox;
			}

			private function handlePublicChatMessageEvent(event:PublicChatMessageEvent):void {
				trace("Got PublicChatMessageEvent");
				showMessage(PUBLIC_CHAT_USERID, event.message);
			}
			
			private function handlePrivateChatMessageEvent(event:PrivateChatMessageEvent):void {
				trace("Got PrivateChatMessageEvent");
				showMessage(event.message.sender, event.message.message);
			}
			
			private function participantHasChatBox(id:String):Boolean {
				var chatBox:ChatBox = chatTabs.getChildByName(id) as ChatBox;
				if (chatBox != null) return true;
				return false;
			}
			
			private function getChatBoxForParticipant(id:String):ChatBox {
				return chatTabs.getChildByName(id) as ChatBox;
			}
			
			private function showMessage(sender:String, message:String):void{
				var chatBox:ChatBox;
				if (! participantHasChatBox(sender)) {
					chatBox = createChatBoxFor(sender);
				}
				
				chatBox = getChatBoxForParticipant(sender);
				chatBox.showNewMessage(message);
				
				if (! isChatBoxCurrentlySelected(sender)) {
					notifyParticipantOfUnreadMessageFrom(sender);
				}				
			}
						
			private function onTabClose(e:SuperTabEvent):void{
				dispatchEvent(e);
			}
			
			private function onUserClosedTab(e:SuperTabEvent):void{
				var name:String = chatTabs.getChildAt(e.tabIndex).name;
			}
			
			private function enableMessageEntryTextBox():void {
				txtMsg.enabled = true;
			}
			
			private function disableMessageEntryTextBox():void {
				txtMsg.enabled = false;
			}
		]]>
	</mx:Script>
	<flexlib:SuperTabNavigator id="chatTabs" width="100%" height="100%" change="onTabNavChange()" tabClose="onTabClose(event)"/>
	
	<mx:ApplicationControlBar id="chatCtrlBar" width="100%" height="10%">		
		<mx:TextInput id="txtMsg" width="100%" enter="sendMessages()"/>
		<mx:ColorPicker id="cmpColorPicker" showTextField="false" toolTip="Text Color" selectedColor="0x000000"/>
		<mx:Button label="Send" id="sendBtn" toolTip="Send Message" click="sendMessages()"/>	
		<mx:ComboBox id="participantList" dataProvider="{participants}" close="onOpenChatBox()" />		    
	</mx:ApplicationControlBar>	
</mx:VBox>
