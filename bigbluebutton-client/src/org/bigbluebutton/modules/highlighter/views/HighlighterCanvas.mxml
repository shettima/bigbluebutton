<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:mate="http://mate.asfusion.com/"
	mouseDown="doMouseDown()" mouseMove="doMouseMove()" mouseUp="doMouseUp()" creationComplete="init()" visible="false"
	mouseOver="setCursor()" mouseOut="removeCursor()" implements="org.bigbluebutton.common.IBbbCanvas">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.managers.CursorManager;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.mate.SharedObjectEvent;
			import org.bigbluebutton.modules.highlighter.business.shapes.DrawObject;
			import org.bigbluebutton.modules.highlighter.business.shapes.DrawObjectFactory;
			import org.bigbluebutton.modules.highlighter.business.shapes.ShapeFactory;
			import org.bigbluebutton.modules.highlighter.events.HighlighterDrawEvent;
			import org.bigbluebutton.modules.highlighter.events.HighlighterUpdate;
			import org.bigbluebutton.modules.highlighter.events.PageEvent;
			import org.bigbluebutton.modules.highlighter.maps.HighlighterEventMap;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			
			private var x1:int;
			private var y1:int;
			private var x2:int; 
			private var y2:int;
			
			public var d:DrawObject;	
			private var isDrawing:Boolean; 
			private var feedback:Shape = new Shape();
			private var segment:Array = new Array();
			private var newShape:Shape = new Shape();
			private var shapeList:Array = new Array();
			
			protected var drawFactory:DrawObjectFactory;
			protected var shapeFactory:ShapeFactory;
			protected var bbbCanvas:IBbbCanvas;
		
			protected var shapeStyle:String = DrawObject.PENCIL;
			protected var drawColor:uint = 0xCCFF00;
			protected var thickness:uint = 10;
			
			private var _xPosition:int;
			private var _yPosition:int;
			
			private var images:Images = new Images();
			[Bindable] private var pencil_icon:Class = images.pencil_icon;
			
			private var whiteboardEnabled:Boolean = false;
			private var showWhiteboard:Boolean = true;
			
			private var drawTimer:Timer;
			
			private function init():void{
				drawFactory = new DrawObjectFactory();
				shapeFactory = new ShapeFactory();
				this.label = "Highlighter";
			}
			
			/**
			*Method is invoked when the mouse is released
			*<p>
			*The method finalizes the shape that was being edited. The shape is then sent as 
			*an event, which updates all client views.  
			*<p>
			*The method also deleted the temporary feedback shape from the screen.
			*/
			private function doMouseUp():void{
				isDrawing = false;
				sendShapeToServer();
				drawTimer.stop();
			}
			
			private function onDrawTimer(e:TimerEvent):void{
				var startX:Number = segment[segment.length - 2] as Number;
				var startY:Number = segment[segment.length - 1] as Number;
				sendShapeToServer();
				startShape(startX,startY);
			}
			
			private function sendShapeToServer():void{
				this.d = drawFactory.makeDrawObject(this.shapeStyle, segment, this.drawColor, this.thickness);
				this.d.parentHeight = this.height;
				this.d.parentWidth = this.width;
				var event:HighlighterDrawEvent = new HighlighterDrawEvent(HighlighterDrawEvent.SEND_SHAPE);
				event.message = d;
				dispatchEvent(event);
				if (rawChildren.contains(feedback)){
					rawChildren.removeChild(feedback);
				}
				feedback = new Shape();
				segment = new Array();
			}

			/**
			*Method is invoked when the mouse is pressed
			*<p>
			*The method captures the x and y coordinates of the mouse click and uses the point as
			*the starting point in a shape
			*/
			private function doMouseDown():void{
				x1 = this.mouseX;
				y1 = this.mouseY;
				startShape(x1, y1);
				drawTimer = new Timer(1000, 0);
				drawTimer.addEventListener(TimerEvent.TIMER, onDrawTimer);
				drawTimer.start();
			}
			
			private function startShape(startX:Number, startY:Number):void{
				isDrawing = true;
				segment.push(startX);
				segment.push(startY);
				rawChildren.addChild(feedback);
			}
			
			/**
			*Method is invoked when the mouse is moved over the canvas
			*<p>
			*The method captures the x and y coordinates of the mouse, adding the points to the current
			*shape being drawn. 
			*<p>
			*Note: The method only works if the mouse is pressed, otherwise does nothing.
			*/
			private function doMouseMove():void{
				if (isDrawing){
					x2 = this.mouseX;
					y2 = this.mouseY;
					segment.push(x2);
					segment.push(y2);
					
					rawChildren.removeChild(feedback);
					feedback = shapeFactory.makeFeedback(segment,this.shapeStyle, this.drawColor, this.thickness);
					rawChildren.addChild(feedback);
					
					x1 = x2;
					y1 = y2;
				}
			}
			
			/**
			 * Draws the segment stored in the drawVO Value Object
			 * <p>
			 * This method is executed by the BoardMediator upon reception of an Update request. The method
			 * is executed on all clients, even the one which sent the update request.
			 */
			public function drawSegment(event:HighlighterUpdate):void{
				var o:DrawObject = event.data;
				draw(o);
			}
			
			private function draw(o:DrawObject):void{
				newShape = shapeFactory.makeShape(o);
				newShape.width = newShape.width * (this.width/o.parentWidth);
				newShape.height = newShape.height * (this.height/o.parentHeight);
	            shapeList.push(newShape);
	            //rawChildren.addChild(shapeList[shapeList.length-1]);
	            bbbCanvas.addRawChild(shapeList[shapeList.length-1]);
	            newShape = new Shape();
			}
			
			/**
			 * Sets the type of shape we're drawing (pencil, rectangle, etc...) 
			 * @param s The type
			 * 
			 */		
			public function setShape(s:String):void{
				this.shapeStyle = s;
			}
			
			/**
			 * Sets the color 
			 * @param e event containing the color (e.target.selectedColor)
			 * 
			 */		
			public function changeColor(e:Event):void{
				drawColor = e.target.selectedColor;
			}
			
			/**
			 * Sets the thickness 
			 * @param e event containing the thickness (e.target.value)
			 * 
			 */		
			public function changeThickness(e:Event):void{
				this.thickness = e.target.value;
			}
			
			/**
			 * Clears the entire board
			 */
			public function clearBoard(event:HighlighterUpdate = null):void{
				for (var i:Number = 0; i<this.shapeList.length; i++){
					if (this.bbbCanvas.doesContain(this.shapeList[i])){
						this.bbbCanvas.removeRawChild(this.shapeList[i]);	
					}
				}
				this.shapeList = new Array();
			}
			
			public function undoShape(event:HighlighterUpdate):void{
				if (this.shapeList.length > 0){
					this.bbbCanvas.removeRawChild(this.shapeList[this.shapeList.length-1]);
					shapeList.pop();
				}
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}
			
			private function scaleCanvas(e:WindowResizedEvent):void{
				zoomCanvas(e.width, e.height);
			}
			
			private function changePage(e:PageEvent):void{
				var page:Number = e.pageNum;
				var shapes:ArrayCollection = e.shapes;
				clearBoard();
				for (var i:int = 0; i<shapes.length; i++){
					var o:DrawObject = shapes.getItemAt(i) as DrawObject;
					draw(o);
				}
			}
			
			private function modifyEnabled(e:HighlighterUpdate):void{
				this.whiteboardEnabled = e.boardEnabled;
				setWhiteboardVisibility();
			}
			
			private function setWhiteboardVisibility():void{
				if (this.whiteboardEnabled && this.showWhiteboard) this.visible = true;
				else this.visible = false;
			}
			
			private function setCursor():void{
				CursorManager.setCursor(pencil_icon);
			}
			
			private function removeCursor():void{
				CursorManager.removeCursor(CursorManager.currentCursorID);
			}
			
			/** Inherited from org.bigbluebutton.common.IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.rawChildren.addChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.rawChildren.removeChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return this.rawChildren.contains(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				LogUtil.debug("WhiteboardCanvas::aceptOverlayCanvas()");
				this.bbbCanvas = overlay;
				//Load existing shapes onto the canvas.
				dispatchEvent(new PageEvent(PageEvent.LOAD_PAGE));
			}
			
			public function moveCanvas(x:int, y:int):void{
				this.x = x;
				this.y = y;
			}
			
			public function zoomCanvas(width:int, height:int):void{
				for (var i:int = 0; i<this.shapeList.length; i++){
					var s:Shape = this.shapeList[i] as Shape;
					s.width = s.width * (width /this.width);
					s.height = s.height * (height /this.height);
				}
				
				this.width = width;
				this.height = height;
			}
			
			public function showCanvas(show:Boolean):void{
				this.showWhiteboard = show;
				setWhiteboardVisibility();
			}
			
			/** End IBBBCanvas*/
			
			public function isPageEmpty():Boolean{
				return (this.shapeList.length == 0);
			}
			
		]]>
	</mx:Script>
	
	<mate:Debugger level="{Debugger.ALL}" />
	<mate:Listener type="{HighlighterUpdate.BOARD_CLEARED}" method="clearBoard" />
	<mate:Listener type="{HighlighterUpdate.BOARD_UPDATED}" method="drawSegment" />
	<mate:Listener type="{HighlighterUpdate.SHAPE_UNDONE}" method="undoShape" />
	<mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="scaleCanvas" />
	<mate:Listener type="{PageEvent.CHANGE_PAGE}" method="changePage" />
	<mate:Listener type="{HighlighterUpdate.BOARD_ENABLED}" method="modifyEnabled" />
</mx:Canvas>
