<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()"
	width="{camWidth + 6}" height="{camHeight + 73}" 
	title="Stream webcam" 
	backgroundImage="{bbbLogo}" 
	resizable="false" 
	xmlns:mate="http://mate.asfusion.com/">
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			import mx.events.ResizeEvent;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import mx.core.UIComponent;
			import mx.controls.Alert;
		
			private var _xPosition:int = 400;
			private var _yPosition:int = 300;
			
			//The following code block is to deal with a bug in FLexLib with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			override public function maximize():void{
				if (!isMaximized){
					savedWindowHeight = this.height;
					savedWindowWidth = this.width;
					savedX = this.x;
					savedY = this.y;
                	dispatchEvent(new MDIWindowEvent(MDIWindowEvent.MAXIMIZE, this));
                	isMaximized = true;
				} else{
					this.width = savedWindowWidth;
					this.height = savedWindowHeight;
					this.x = savedX;
					this.y = savedY;
					isMaximized = false;
					//dispatchEvent(new MDIWindowEvent(MDIWindowEvent.RESTORE, this));
				}	
			}
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.webcam;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			[Bindable] private var resolutions:Array = new Array("320x240", "640x480");
			
			private var video:Video;
			public var streamName:String;
			[Bindable] private var camWidth:Number = 320;
			[Bindable] private var camHeight:Number = 240;
			private var _userrole:String;
			
			private function init():void{
				checkIfMacCamera();
				if (isPresenter()) showResControls(true);
				if (Camera.names.length > 1) showVideoControls(true);
				if (!isPresenter() && Camera.names.length == 1) startPublishing();
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}	
			
			private var _defaultWidth:int;
			private var _defaultHeight:int;
			
			public function get defaultWidth():int{
				return _defaultWidth;
			}
			
			public function get defaultHeight():int{
				return _defaultHeight;
			}
			
			public function set defaultHeight(height:int):void{
				this._defaultHeight = height;
			}
			
			public function set defaultWidth(width:int):void{
				this._defaultWidth = width;
			}
			
			public function resetWidthAndHeight():void{}	
			
			private function startPublishing():void{
				var camera:Camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (camera == null) return;
				
				setResolution();
				
				camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight,15);
				camera.setQuality(0,0);
				
				video = new Video(camWidth, camHeight);
				//Next two lines may seem redundant but they're not. Do not delete.
				video.width = camWidth;
				video.height = camHeight;
				video.attachCamera(camera);
				videoHolder.addChild(video);
				addChild(videoHolder);
				
				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = camera;
				dispatchEvent(e);
				
				showVideoControls(false);
				showResControls(false);
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopPublishing():void{
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = this.streamName;
				dispatchEvent(e);
			}
			
			private function setResolution():void{
				if (cmbResolution.selectedLabel == "320x240"){
					camHeight = 240;
					camWidth = 320;
				} else if (cmbResolution.selectedLabel == "640x480"){
					camHeight = 480;
					camWidth = 640;
				}
				this.streamName = cmbResolution.selectedLabel.concat(this.streamName);
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function showVideoControls(show:Boolean):void{
				if (show){
					bottomBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = true;
				} else{
					bottomBar.visible = false;
					btnStartPublish.visible = false;
					cmbCameraSelector.visible = false;
				}
			}
			
			private function showResControls(show:Boolean):void{
				if (show) cmbResolution.visible = true;
				else cmbResolution.visible = false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:Number; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") cmbCameraSelector.selectedIndex = i;
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:UIComponent id="videoHolder" width="{camWidth}" height="{camHeight}" />
	<mx:ControlBar id="bottomBar">
		<mx:Button id="btnStartPublish" toolTip="start streaming" icon="{camIcon}" click="startPublishing()" />
		<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" width="150" visible="false" />
		<mx:ComboBox id="cmbResolution" dataProvider="{resolutions}" width="20%" visible="false" />
	</mx:ControlBar>
	
	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</MDIWindow>
