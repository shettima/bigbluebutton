<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()"
	width="{camWidth + 6}" height="{camHeight + 63}" 
	title="Stream webcam"  
	resizable="false" 
	xmlns:mate="http://mate.asfusion.com/" xmlns:views="org.bigbluebutton.modules.videoconf.views.*" xmlns:containers="flexlib.containers.*">
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
		
			private var _xPosition:int = 200;
			private var _yPosition:int = 200;
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			
			private var video:Video;
			public var streamName:String;
			[Bindable] private var camWidth:Number = 320;
			[Bindable] private var camHeight:Number = 240;
			private var _userrole:String;
			
			private function init():void{
				checkIfMacCamera();
				if (isPresenter() || (Camera.names.length > 1)) {
					optionsTab.showControls(true);
					drawTip();
				}

				if (!isPresenter() && Camera.names.length == 1) startPublishing();
				maximizeRestoreBtn.visible = false;
				
				optionsTab.addEventListener(PublishOptionsTab.START_PUBLISH, startPublishing);
			}
			
			private function drawTip():void{
				var t:TextField = new TextField();
				t.text = "Click to start sharing";
				t.selectable = false;
				var textFormat:TextFormat = new TextFormat("Verdana", 18, 0x000000, true);
				t.setTextFormat(textFormat);
				videoHolder.rawChildren.addChild(t);
				t.x = 50;
				t.width = videoHolder.width;
				t.y = videoHolder.height - 50;
			}
			
			public function get xPosition():int {
				return _xPosition;
			}
			
			public function get yPosition():int {
				return _yPosition;
			}
			
			public function set xPosition(x:int):void {
				_xPosition = x;
			}
			
			public function set yPosition(y:int):void {
				_yPosition = y;
			}	
			
			private var _defaultWidth:int;
			private var _defaultHeight:int;
			
			public function get defaultWidth():int{
				return _defaultWidth;
			}
			
			public function get defaultHeight():int{
				return _defaultHeight;
			}
			
			public function set defaultHeight(height:int):void{
				this._defaultHeight = height;
			}
			
			public function set defaultWidth(width:int):void{
				this._defaultWidth = width;
			}
			
			public function resetWidthAndHeight():void{}	
			
			private function startPublishing(event:Event = null):void{
				var camera:Camera = Camera.getCamera(optionsTab.selectedCamera.toString());
				if (camera == null) return;
				
				setResolution();
				
				camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight,15);
				camera.setQuality(0,0);
				
				video = new Video(camWidth, camHeight);
				//Next two lines may seem redundant but they're not. Do not delete.
				video.width = camWidth;
				video.height = camHeight;
				video.attachCamera(camera);
				videoHolder.rawChildren.addChild(video);
//				addChild(videoHolder);
				
				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = camera;
				dispatchEvent(e);
				
				optionsTab.showVideoControls(false);
				optionsTab.showControls(false);
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopPublishing():void{
				if (video != null) {
					video.attachCamera(null);
					video.clear();
					video = null;
				}
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = this.streamName;
				dispatchEvent(e);
			}
			
			private function setResolution():void{
				if (optionsTab.selectedResolution == PublishOptionsTab.RESOLUTION_320x240){
					camHeight = 240;
					camWidth = 320;
				} else if (optionsTab.selectedResolution == PublishOptionsTab.RESOLUTION_640x480){
					camHeight = 480;
					camWidth = 640;
				}
				this.streamName = optionsTab.selectedResolution.concat(this.streamName);
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") {
						optionsTab.cmbCameraSelector.selectedIndex = i;
					}
				}
			}
			
			private function rolloverVideoHolder():void{
				//Do something fancy here to show the image is clickable, similar to when you rollover a button
			}
			
		]]>
	</mx:Script>
	
	<mx:TabNavigator id="tabNav" width="100%" height="100%" >
		<mx:Canvas id="videoHolder" width="{camWidth}" height="{camHeight}" label="Stream" backgroundImage="{bbbLogo}" click="startPublishing()" rollOver="rolloverVideoHolder()" />
		<views:PublishOptionsTab id="optionsTab" width="100%" height="100%" visible="false" />
	</mx:TabNavigator>
	
	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</MDIWindow>
