<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton - http://www.bigbluebutton.org
  
  Copyright (c) 2008-2009 by respective authors (see below). All rights reserved.
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 3 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, If not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:main="org.bigbluebutton.main.view.components.*"
		xmlns:mate="http://mate.asfusion.com/"
		width="100%" height="100%"
		creationComplete="initializeShell()">
		
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
	<mate:Listener type="{AddHighligtherCanvasEvent.ADD_HIGHLIGHTER_CANVAS}" method="handleAddHighlighter" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.main.events.AddHighligtherCanvasEvent;
			import org.bigbluebutton.main.events.OpenWindowEvent;
			import org.bigbluebutton.main.events.CloseWindowEvent;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import flexlib.mdi.containers.MDIWindow;
			import org.bigbluebutton.util.logging.Logger;
			import org.bigbluebutton.main.view.events.StartModuleEvent;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.containers.TitleWindow;
			import mx.core.Application;
			import mx.controls.Alert;
			import org.bigbluebutton.common.Constants;
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			import org.bigbluebutton.main.MainApplicationFacade;
			import org.bigbluebutton.main.view.MainApplicationShellMediator;
			import flash.events.MouseEvent;
			import org.bigbluebutton.main.view.assets.Images;
			
			public static const NAME:String = 'MainApplicationShell';
			protected var facade:MainApplicationFacade = MainApplicationFacade.getInstance();	
			private var globalDispatcher:Dispatcher;
			
			private var dispState:String; //full-screen?
			private var images:Images = new Images();
			private var stoppedModules:ArrayCollection;
			
			private var logs:Logger = new Logger();
			private var logWindow:LogWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable]
			public var appVersion:String = '0.1';
			[Bindable]
			public var numberOfModules:int = 0;
			
			[Bindable] private var fullscreen_icon:Class = images.full_screen;
			[Bindable] private var logs_icon:Class = images.logs;
			[Bindable] private var reset_layout_icon:Class = images.layout;
			
			public function get mode():String {
				return _mode;
			}
			
			protected function initializeShell():void
			{			
				trace('Initializing');	
				logWindow = new LogWindow();
				logWindow.logs = logs;
				
				facade.startup(this);
				globalDispatcher = new Dispatcher();
			}		

			protected function initFullScreen():void
			{				
				/* Set up full screen handler. */
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = stage.displayState;
			}					
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					LogUtil.debug("Switching to full screen");
					/* Do something specific here if we switched to full screen mode. */
				
				} else {
					LogUtil.debug("Switching to normal screen");
					/* Do something specific here if we switched to normal mode. */
				}
			}			
			
			private function openLogWindow():void {
				mdiCanvas.windowManager.add(logWindow);
				mdiCanvas.windowManager.absPos(logWindow, 100, 100);
			}
			
			private function toggleFullScreen():void{
	   			LogUtil.debug("Toggling fullscreen");
	   			try {
					switch (stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							LogUtil.debug("full screen mode");
							// If already in full screen mode, switch to normal mode.
							stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							LogUtil.debug("Normal screen mode");
							// If not in full screen mode, switch to full screen mode.
							stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
	   		}	
	   		
	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.windowManager.add(window as MDIWindow);
				mdiCanvas.windowManager.absPos(window as MDIWindow, window.xPosition, window.yPosition);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				mdiCanvas.windowManager.remove(window as MDIWindow);
	   		}		
	   		
	   		private function handleAddHighlighter(event:AddHighligtherCanvasEvent):void {
	   			trace("GOT HIGHLIGHTER EVENT");
	   		}
	   		
	   		private function resetLayout():void{
	   			var windows:Array = mdiCanvas.windowManager.getOpenWindowList();
	   			for (var i:Number=0; i<windows.length; i++){
	   				var window:IBbbModuleWindow = windows[i] as IBbbModuleWindow;
	   				mdiCanvas.windowManager.absPos(window as MDIWindow, window.xPosition, window.yPosition);
	   			}
	   		}
		]]>
	</mx:Script>
			
		<main:MainToolbar id="toolbar" dock="true" width="100%" height="30" visible="false" verticalAlign="middle"/>
		<flexmdi:MDICanvas id="mdiCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off"
			effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}"
			width="100%" height="100%">		
			<mx:Label x="200" y="400" id="statusInfo" text="Please wait while we load {numberOfModules} modules: "/>
			<mx:Label x="200" y="420" id="statusInfo2"/>
			<mx:Label x="200" y="440" id="statusProgress" text="Loading: "/>
		</flexmdi:MDICanvas>	
	 	<mx:ControlBar width="100%" height="20" paddingTop="0">		
		  <mx:Label text="(c) 2009, BigBlueButton version {appVersion} - For more information see http://www.bigbluebutton.org/." id="copyrightLabel2"/>
		  <mx:Spacer width="20"/>
		  <mx:Spacer width="100%"/> 
		  <mx:Button width="20" height="20" toolTip="Open Log Window" id="logBtn" icon="{logs_icon}" click="openLogWindow()" />
		  <mx:Button width="20" height="20" toolTip="Toggle Full-Screen" id="fullScreen" icon="{fullscreen_icon}" click="toggleFullScreen()" />
		  <mx:Button width="20" height="20" toolTip="Reset Layout" id="btnResetLayout" icon="{reset_layout_icon}" click="resetLayout()" />
		</mx:ControlBar>
</mx:VBox>
